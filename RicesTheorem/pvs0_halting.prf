(pvs0_halting
 (true_val_TCC1 0
  (true_val_TCC1-2 nil 3718320449 ("" (inst 1 "false_val+1") nil nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (true_val_TCC1-1 nil 3718320440 ("" (existence-tcc) nil nil) nil
   nil))
 (Oracle_TCC1 0
  (Oracle_TCC1-1 nil 3718559211
   ("" (expand "terminating?")
    (("" (expand "terminates_expr")
      (("" (expand "nth")
        (("" (skeep)
          (("" (expand "semantic_rel_expr")
            (("" (expand "eval_op1")
              (("" (expand "length")
                (("" (expand "length")
                  (("" (expand "nth")
                    (("" (expand "semantic_rel_expr")
                      ((""
                        (case "determined?[nat]
                   (nat2p_recursive[false_val, lop1, lop2]
                        (nat2tuple(env)`1))
                   (nat2tuple(env)`2)")
                        (("1" (inst 1 "true_val")
                          (("1" (inst 1 "env") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (inst 2 "false_val")
                          (("2" (inst 2 "env") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminates_expr const-decl "bool" pvs0_expr nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (true_val const-decl "{x: nat | x /= false_val}" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lPVS0Expr type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting
     nil)
    (partial_recursive? const-decl "bool" pvs0_computable nil)
    (partial_recursive type-eq-decl nil pvs0_computable nil)
    (nat2p_recursive const-decl "[nat -> partial_recursive]"
     pvs0_computable nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (length def-decl "nat" list_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil))
 (pvs0_halting_problem_decidability 0
  (pvs0_halting_problem_decidability-1 nil 3748612777
   ("" (skeep)
    (("" (expand "Oracle")
      (("" (expand "semantic_rel")
        (("" (expand "semantic_rel_expr")
          (("" (expand "length")
            (("" (assert)
              (("" (expand "nth")
                (("" (expand "semantic_rel_expr")
                  (("" (prop)
                    (("1" (assert)
                      (("1"
                        (inst 1 "tuple2nat(p_recursive2nat(pvs0),n)")
                        (("1" (expand "eval_op1" 1)
                          (("1" (expand "length")
                            (("1" (expand "length")
                              (("1"
                                (expand "nth")
                                (("1"
                                  (rewrite "nat2tuple_tuple2nat")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nat2p_recursive")
                                      (("1"
                                        (lemma
                                         "injective_inverse[partial_recursive,nat]")
                                        (("1"
                                          (inst
                                           -1
                                           "pvs0"
                                           "p_recursive2nat(pvs0)"
                                           "_")
                                          (("1"
                                            (inst -1 "p_recursive2nat")
                                            (("1"
                                              (replaces -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "p_recursive2nat")
                                              (("2"
                                                (hide 2 3)
                                                (("2"
                                                  (expand
                                                   "injective?"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (typepred "x1")
                                                        (("1"
                                                          (typepred
                                                           "x2")
                                                          (("1"
                                                            (expand
                                                             "partial_recursive?")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "x1")
                                                        (("2"
                                                          (typepred
                                                           "x2")
                                                          (("2"
                                                            (expand
                                                             "partial_recursive?")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred "x1")
                                                        (("3"
                                                          (typepred
                                                           "x2")
                                                          (("3"
                                                            (expand
                                                             "partial_recursive?")
                                                            (("3"
                                                              (prop)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (lemma
                                                         "nat2listPVS0_inverse")
                                                        (("4"
                                                          (inst-cp
                                                           -1
                                                           "x1`4")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "x2`4")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           1
                                           "(lop1,lop2,false_val,(:vr:))")
                                          (("2"
                                            (hide 2 3)
                                            (("2"
                                              (expand
                                               "partial_recursive?")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "tuple2nat_assump")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (replace -2)
                        (("2" (assert)
                          (("2" (expand "eval_op1")
                            (("2" (expand "length")
                              (("2"
                                (expand "length")
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (rewrite "nat2tuple_tuple2nat")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nat2p_recursive")
                                        (("2"
                                          (lemma
                                           "injective_inverse[partial_recursive,nat]")
                                          (("1"
                                            (inst
                                             -1
                                             "pvs0"
                                             "p_recursive2nat(pvs0)"
                                             "p_recursive2nat")
                                            (("1"
                                              (replaces -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (expand
                                                 "p_recursive2nat")
                                                (("2"
                                                  (expand "injective?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "x1")
                                                      (("2"
                                                        (typepred "x2")
                                                        (("2"
                                                          (expand
                                                           "partial_recursive?")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-11
                                                                  1))
                                                                (("2"
                                                                  (lemma
                                                                   "nat2listPVS0_inverse")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "x1`4")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x2`4")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (inst
                                               1
                                               "(lop1,lop2,false_val,(:vr:))")
                                              (("2"
                                                (expand
                                                 "partial_recursive?")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "tuple2nat_assump")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Oracle const-decl "(terminating?)" pvs0_halting nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (length_null formula-decl nil more_list_props "structures/")
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (nat2p_recursive const-decl "[nat -> partial_recursive]"
     pvs0_computable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat2listPVS0_inverse formula-decl nil pvs0_to_nat nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (injective_inverse formula-decl nil function_inverse nil)
    (p_recursive2nat const-decl "nat" pvs0_computable nil)
    (partial_recursive type-eq-decl nil pvs0_computable nil)
    (partial_recursive? const-decl "bool" pvs0_computable nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting
     nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (lPVS0Expr type-eq-decl nil pvs0_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (semantic_rel const-decl "bool" pvs0_lang nil))
   nil))
 (pvs0_halting_problem_undecidability 0
  (pvs0_halting_problem_undecidability-1 nil 3748616139
   ("" (skolem -1 "f")
    (("" (typepred "f")
      (("" (expand "computable?")
        (("" (prop)
          (("" (expand "partial_recursive?")
            (("" (prop)
              (("" (skeep)
                (("" (hide-all-but (-7))
                  ((""
                    (name "ff"
                          "(f`1,f`2,false_val,cons(ite(rec(1,op2(i,vr,vr)),rec(0,vr),cnst(true_val)),map(offset_rec(1)) (f`4)))")
                    (("" (hide -1)
                      (("" (name "eff" "p_recursive2nat(ff)")
                        (("1" (inst - "ff" "eff")
                          (("1" (replaces -1)
                            (("1"
                              (case "NOT semantic_rel(f)(tuple2nat(eff,eff),false_val)")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "mu_terminates")
                                  (("1"
                                    (inst -1 "ff" "eff")
                                    (("1"
                                      (skoletin* -1)
                                      (("1"
                                        (expand "eval")
                                        (("1"
                                          (expand "ff" -2 (2))
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "eval_expr")
                                              (("1"
                                                (case-replace
                                                 "mun = 0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (name
                                                           "EE"
                                                           "eval_expr(ff)
mun, rec(1,op2(i,vr,vr)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                      
eff)")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "eval_expr"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "ff"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (case
                                                                     "1 < 1 + length(map(offset_rec(1))(f`4))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "ff"
                                                                         -2
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (expand
                                                                             "eval_expr"
                                                                             -2
                                                                             (1
                                                                              3))
                                                                            (("1"
                                                                              (expand
                                                                               "eval_expr"
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (case
                                                                                 "i < length(ff`2)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "eval_expr"
                                                                                     -3
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_expr"
                                                                                       -3
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_expr"
                                                                                         -3
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "eval_expr"
                                                                                           -3
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "eval_expr"
                                                                                             -3
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "eval_expr"
                                                                                               -3
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "eval_expr"
                                                                                                 -3
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "nth(ff`2, i)= tuple2nat")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eval_op2")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "add_rec_list_aux")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "ff`3"
                                                                                                           "nth(f`4,0)"
                                                                                                           "mun-1"
                                                                                                           "f`4"
                                                                                                           "(: ite(rec(1,op2(i, vr, vr)), rec(0, vr), cnst(true_val)) :)"
                                                                                                           "ff`1"
                                                                                                           "ff`2"
                                                                                                           "tuple2nat(eff, eff)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "append")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "map_nth_rw")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "ff"
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "ff"
                                                                                                                         -1
                                                                                                                         (4
                                                                                                                          5
                                                                                                                          6))
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "mu")
                                                                                                                            (("1"
                                                                                                                              (with-tccs
                                                                                                                               (typepred
                                                                                                                                "min({n: nat | some?(eval(ff)(n)(eff))})"))
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -11
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "mun-1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "eval"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "ff"
                                                                                                                                         1
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nth")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "eval_expr_semantic_rel")
                                                                                                                                                (("1"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "eval_expr"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "ff"
                                                                                                                                                       -1
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "eval_expr"
                                                                                                                                                           -1
                                                                                                                                                           (1
                                                                                                                                                            3))
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "ff"
                                                                                                                                                               -1
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (inst
                                                                                                                                                     -3
                                                                                                                                                     "f"
                                                                                                                                                     "tuple2nat(eff,eff)"
                                                                                                                                                     "car(f`4)"
                                                                                                                                                     "val(EE)"
                                                                                                                                                     "mun-1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "ff"
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "semantic_rel"
                                                                                                                                                               3)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "nth")
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "f")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "computable?")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "partial_recursive?")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "ff"
                                                                                                                                                                             -9)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "EE"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (prop)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     (-1
                                                                                                                                                                                      -2
                                                                                                                                                                                      -3
                                                                                                                                                                                      -13
                                                                                                                                                                                      -14
                                                                                                                                                                                      1))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "f=(f`1, f`2, false_val, f`4)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (decompose-equality)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "eval_expr"
                                                                                                                                                                                     1
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "eval_expr"
                                                                                                                                                                                       1
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "eval_expr"
                                                                                                                                                                                         1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "eval_expr"
                                                                                                                                                                                           1
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "ff"
                                                                                                                                                                                             1
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "length"
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "eval_expr"
                                                                                                                                                                                                 1
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "eval_expr"
                                                                                                                                                                                                   1
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "eval_expr"
                                                                                                                                                                                                     1
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "eval_op2")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "eval_expr"
                                                                                                                                                                                                         1
                                                                                                                                                                                                         2)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "eval_expr"
                                                                                                                                                                                                           1
                                                                                                                                                                                                           2)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (reveal
                                                                                                                                                                                                             -2)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "ff"
                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "nth")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "nth")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "map"
                                                                                                                                                                                                                         1
                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -8
                                                                                                                                                                                                                           :dir
                                                                                                                                                                                                                           rl)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -11
                                                                                                                                                                                                                             :dir
                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "ff"
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                                 (-4
                                                                                                                                                                                                                                  1))
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                   "f=(f`1, f`2, false_val, f`4)")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (decompose-equality)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -10)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "ff"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "f")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ff")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "computable?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "partial_recursive?")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "ff")
                                  (("2"
                                    (expand "determined?")
                                    (("2"
                                      (expand "semantic_rel" 1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (expand "semantic_rel_expr")
                                          (("2"
                                            (inst 1 "true_val")
                                            (("2"
                                              (inst 1 "false_val")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr"
                                                   1
                                                   2)
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand "length")
                                                      (("2"
                                                        (case
                                                         "1 < 1 + length(map(offset_rec(1))(f`4))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "tuple2nat(eff,eff)")
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (rewrite
                                                                 "map_nth_rw")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (case
                                                                       "i < length(f`2)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "eff"
                                                                           "eff")
                                                                          (("1"
                                                                            (expand
                                                                             "semantic_rel_expr")
                                                                            (("1"
                                                                              (expand
                                                                               "eval_op2")
                                                                              (("1"
                                                                                (reveal
                                                                                 -7)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "f")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "computable?")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "partial_recursive?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "f")
                                                                        (("2"
                                                                          (expand
                                                                           "computable?")
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (expand
                                                                               "partial_recursive?")
                                                                              (("2"
                                                                                (reveal
                                                                                 -7)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "i")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "semantic_rel")
                                                                    (("2"
                                                                      (lemma
                                                                       "semantic_rel_eval_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f"
                                                                         "nth(f`4,0)"
                                                                         "tuple2nat(eff,eff)"
                                                                         "false_val")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lemma
                                                                               "add_rec_list_aux")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "f`3"
                                                                                 "nth(f`4,0)"
                                                                                 "n"
                                                                                 "f`4"
                                                                                 "(:ite(rec(1, op2(i, vr, vr)), rec(0, vr),
                                                                     cnst(true_val)):)"
                                                                                 "f`1"
                                                                                 "f`2"
                                                                                 "tuple2nat(eff,eff)")
                                                                                (("2"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "append")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "append")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "f")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "computable?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "partial_recursive?")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "eval_expr_semantic_rel")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "(f`1,f`2,false_val,cons(ite(rec(1, op2(i, vr, vr)), rec(0, vr),
                                                                     cnst(true_val)),
                                                                 map(offset_rec(1))(f`4)) )"
                                                                                                           " tuple2nat(eff, eff)"
                                                                                                           "offset_rec(1)(nth(f`4, 0))"
                                                                                                           "false_val"
                                                                                                           "n")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "f=(f`1, f`2, f`3, f`4)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -8
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (expand "ff")
                            (("2" (expand "partial_recursive?")
                              (("2"
                                (typepred "f")
                                (("2"
                                  (expand "computable?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "partial_recursive?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (rewrite
                                                   "map_length")
                                                  (("2"
                                                    (case "i_1=0")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "valid_index_rec"
                                                           1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (expand
                                                               "subterm")
                                                              (("1"
                                                                (expand
                                                                 "subterm")
                                                                (("1"
                                                                  (expand
                                                                   "subterm")
                                                                  (("1"
                                                                    (expand
                                                                     "subterm")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (decompose-equality)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (decompose-equality)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "nth" 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "map_nth_rw")
                                                          (("1"
                                                            (lemma
                                                             "valid_index_rec_offset")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "nth(f`4, i_1 - 1)"
                                                               "length(f`4)"
                                                               " 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "i_1-1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "i_1")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "map_length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_recursive? const-decl "bool" pvs0_computable nil)
    (offset_rec def-decl "PVS0Expr" pvs0_lang nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (true_val const-decl "{x: nat | x /= false_val}" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[[nat, PVS0Expr] -> (rec?)]"
     PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (partial_recursive type-eq-decl nil pvs0_computable nil)
    (p_recursive2nat const-decl "nat" pvs0_computable nil)
    (TRUE const-decl "bool" booleans nil)
    (semantic_rel_eval_expr formula-decl nil pvs0_expr nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (valid_index_rec const-decl "bool" pvs0_lang nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (add_rec_list_aux formula-decl nil pvs0_lang nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (eval_expr_semantic_rel formula-decl nil pvs0_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (EE skolem-const-decl "{myv: Maybe[nat] |
         some?(myv) IMPLIES
          semantic_rel_expr(ff)(rec(1, op2(i, vr, vr)), eff, val(myv))}"
     pvs0_halting nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (f skolem-const-decl "computable[false_val, lop1, lop2]"
     pvs0_halting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}"
     pvs0_to_nat nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          i > 0 AND
           (FORALL (m: upfrom(i)): myv = eval_expr(pvs0)(m, expr, env))}"
     pvs0_to_nat nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (ff skolem-const-decl
     "[EvalOp1[nat], EvalOp2[nat], nat, (cons?[PVS0Expr[nat]])]"
     pvs0_halting nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (mu_terminates formula-decl nil pvs0_lang nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (get_from_list adt-accessor-decl "[(rec?) -> nat]" PVS0Expr_adt
     nil)
    (valid_index_rec_offset formula-decl nil pvs0_lang nil)
    (map_length formula-decl nil more_map_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lPVS0Expr type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting
     nil)
    (computable? const-decl "bool" pvs0_computable nil)
    (computable type-eq-decl nil pvs0_computable nil))
   nil)))

