pvs0_to_nat : THEORY
BEGIN

  IMPORTING pvs0_lang[nat],
            numbers@nat_list_enum,
	    numbers@tuple2nat

  nat2PVS0(n : nat): RECURSIVE PVS0Expr =
    IF n = 0 THEN
      vr
    ELSIF divides(5, n-1) THEN
      cnst((n-1)/5)
    ELSIF divides(5, n-2) THEN
      rec(nat2tuple((n-2)/5)`1,nat2PVS0(nat2tuple((n-2)/5)`2))
    ELSIF divides(5, n-3) THEN
      op1(nat2tuple((n-3)/5)`1,nat2PVS0(nat2tuple((n-3)/5)`2))
    ELSIF divides(5, n-4) THEN
      op2(nat2tuple((n-4)/5)`1,
  	  nat2PVS0(nat2tuple(nat2tuple((n-4)/5)`2)`1),
	  nat2PVS0(nat2tuple(nat2tuple((n-4)/5)`2)`2))
    ELSE
      ite(nat2PVS0(nat2tuple((n-5)/5)`1),
          nat2PVS0(nat2tuple(nat2tuple((n-5)/5)`2)`1),
	  nat2PVS0(nat2tuple(nat2tuple((n-5)/5)`2)`2))
    ENDIF
  MEASURE n

  PVS02nat(expr : PVS0Expr): RECURSIVE nat =
    CASES expr OF
      vr : 0,
      cnst(v) : v*5+1,
      rec(n,arg1): tuple2nat(n,PVS02nat(arg1))*5+2,
      op1(n,arg1): tuple2nat(n,PVS02nat(arg1))*5+3,
      op2(n,arg1,arg2): tuple2nat(n,tuple2nat(PVS02nat(arg1),PVS02nat(arg2)))*5+4,
      ite(arg1,arg2,arg3):
        tuple2nat(PVS02nat(arg1),tuple2nat(PVS02nat(arg2),PVS02nat(arg3)))*5+5
    ENDCASES
  MEASURE expr BY <<

  nat2PVS0_inverse: LEMMA
    FORALL(expr : PVS0Expr): nat2PVS0(PVS02nat(expr)) = expr

  PVS02nat_inverse: LEMMA
    FORALL(n: nat): PVS02nat(nat2PVS0(n)) = n

  nat2PVS0_bijection: LEMMA
    bijective?(nat2PVS0)


    map_nat2PVS0_inverse : LEMMA
    FORALL(l : list[PVS0Expr[nat]]) :
    map(nat2PVS0)(map(PVS02nat)(l)) = l

    map_PVS02nat_inverse : LEMMA
    FORALL(l : list[nat]) :
    map(PVS02nat)(map(nat2PVS0)(l)) = l

    nat2listPVS0(n: nat) : (cons?[PVS0Expr[nat]]) =
    map(nat2PVS0)(nat_list_enum(n+1))

    listPVS02nat(l : (cons?[PVS0Expr[nat]])) : nat =
    nat_list_enum_inv(map(PVS02nat)(l))-1

    nat2listPVS0_inverse : LEMMA
    FORALL(l : (cons?[PVS0Expr[nat]])) :
    nat2listPVS0(listPVS02nat(l)) = l

    listPVS02nat_inverse : LEMMA
    FORALL(n: nat):
    listPVS02nat(nat2listPVS0(n)) = n

    

END pvs0_to_nat
