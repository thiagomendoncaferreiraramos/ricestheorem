("fixedpoint" fixedpoint IMP_pvs0_computable_TCC1 0 (IMP_pvs0_computable_TCC1-1 nil 3754220433 ("" (lemma "tuple2nat_assump") (("" (propax) nil nil)) nil) ((tuple2nat_assump formula-decl nil fixedpoint nil)) nil))("is_infinite_nat" is_infinite_nat infinite_subset_nat 0 (infinite_subset_nat-1 nil 3754406439 ("" (skeep) (("" (typepred "s") (("" (expand "is_finite") (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("fixedpoint" fixedpoint IMP_pvs0_computable_TCC1 0 (IMP_pvs0_computable_TCC1-1 nil 3754307138 ("" (lemma "tuple2nat_assump") (("" (propax) nil nil)) nil) ((tuple2nat_assump formula-decl nil fixedpoint nil)) nil))("fixedpoint" fixedpoint fixed_point2 0 (fixed_point2-1 nil 3757079028 ("" (skeep) (("" (lemma "tuple2nat_assump") (("" (skeep) (("" (lemma "universal_PVS0_program") (("" (skeep) (("" (lemma "diagonal_function") (("" (skeep) (("" (inst -1 "_" "i" "universal`4") (("" (name "v" "(lop1,lop2,false_val,cons(rec(1,rec(1+length(f`4),vr)),append(map(offset_rec(1))(f`4), map(offset_rec(1+length(f`4)))(diagonal`4))))") (("" (inst 1 "part2part(diagonal)(v)") (("1" (skeep) (("1" (expand "part2part" -5 1) (("1" (typepred "choose({o1: nat
                                                   |
                                                   semantic_rel
                                                   (diagonal)
                                                   (p_recursive2nat2(v), o1)})") (("1" (inst -3 "p_recursive2nat2(v)") (("1" (skoletin* -3) (("1" (flatten) (("1" (lemma "deterministic") (("1" (inst -1 "p_recursive2nat2(v)" "diagonal" "p_recursive2nat2(m)" "choose({o1: nat |
                                         semantic_rel(diagonal)
                                                     (p_recursive2nat2(v), o1)})") (("1" (assert) (("1" (replace -1 :dir rl) (("1" (rewrite "nat2p_recursive2_opposite") (("1" (replace -4 -9) (("1" (expand "semantic_rel" -9) (("1" (expand "nth" -9) (("1" (expand "semantic_rel_expr") (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -11) (("1" (skeep) (("1" (expand "eval_op2") (("1" (replace -10) (("1" (replaces -13) (("1" (expand "semantic_rel_expr" -12) (("1" (replaces -12) (("1" (expand "semantic_rel_expr" -11) (("1" (skeep) (("1" (prop) (("1" (expand "nth" -2) (("1" (expand "semantic_rel_expr" -13) (("1" (skeep) (("1" (expand "semantic_rel_expr" -13) (("1" (replaces -13) (("1" (expand "semantic_rel_expr" -13) (("1" (replaces -13) (("1" (expand "eval_op2") (("1" (replace -12) (("1" (replaces -13) (("1" (expand "nth" -4) (("1" (expand "nth" -4) (("1" (lemma "add_rec_list") (("1" (inst -1 "false_val" "car(universal`4)" "universal`4" "(: rec(1,
                                 op2(i,
                                     rec
                                     (1,
                                      op2
                                      (i,
                                       cnst(p_recursive2nat2(v)),
                                       cnst(p_recursive2nat2(v)))),
                                     vr)) :)" "lop1" "lop2" "tuple2nat(p_recursive2nat2(v),
                                  p_recursive2nat2(v))" "valarg1") (("1" (expand "append" -1) (("1" (expand "append" -1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (expand "map" -5 2) (("1" (assert) (("1" (expand "nth" -3) (("1" (expand "map" -3 2) (("1" (assert) (("1" (inst-cp -12 "p_recursive2nat2(v)" "p_recursive2nat2(v)" "valarg1") (("1" (rewrite "nat2p_recursive2_opposite") (("1" (expand "semantic_rel" -13) (("1" (expand "nth" -13) (("1" (case "(lop1, lop2, false_val, universal`4) = universal") (("1" (replace -1) (("1" (assert) (("1" (expand "v" -14 (1 2)) (("1" (expand "semantic_rel_expr" -14) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -16) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -18) (("1" (replaces -18) (("1" (expand "nth" -2) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil) ("2" (rewrite "map_length") (("2" (assert) (("2" (expand "nth" -1) (("2" (expand "map" -1 3) (("2" (lemma "add_rec_list") (("2" (inst -1 "false_val" "car(diagonal`4)" "diagonal`4" "cons(rec(1, rec(1 + length(f`4), vr)), map(offset_rec(1))(f`4))" "lop1" "lop2" "p_recursive2nat2(v)" "valarg!2") (("2" (expand "append" -1 1) (("2" (expand "length" -1 2) (("2" (expand "length" -1 3) (("2" (rewrite "map_length") (("2" (assert) (("2" (hide -2 -3 -4) (("2" (hide -4 -5 -6 -7) (("2" (expand "nth" -2) (("2" (expand "map" -2 3) (("2" (expand "append" -2 2) (("2" (expand "nth" -2) (("2" (lemma "add_rec_list") (("2" (inst -1 "false_val" "car(f`4)" "append(f`4,
                                    map
                                    (offset_rec( length(f`4)))
                                    (diagonal`4))" "(: rec(1, rec(1 + length(f`4), vr)) :)" "lop1" "lop2" "valarg!2" "valarg1") (("1" (expand "append" -1 2) (("1" (expand "append" -1 2) (("1" (expand "length" -1 3) (("1" (expand "length" -1 3) (("1" (rewrite "map_append") (("1" (rewrite "map_list_composition") (("1" (rewrite "offset_composition2") (("1" (expand "length" -1 4) (("1" (expand "length" -1 4) (("1" (assert) (("1" (lemma "add_rec_list2") (("1" (inst -1 "false_val" "car(f`4)" "f`4" "map(offset_rec(length(f`4)))(diagonal`4)" "lop1" "lop2" "valarg!2" "valarg1") (("1" (assert) (("1" (hide -2 -4 1) (("1" (lemma "add_rec_list") (("1" (inst -1 "false_val" "car(universal`4)" "universal`4" "(: rec(1,
                                 op2(i,
                                     rec
                                     (1,
                                      op2
                                      (i,
                                       cnst(p_recursive2nat2(v)),
                                       cnst(p_recursive2nat2(v)))),
                                     vr)) :)" "lop1" "lop2" "tuple2nat(valarg1, i!1)" "o1") (("1" (expand "append" -1 1) (("1" (expand "append" -1 1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (expand "length" -1 1) (("1" (inst -12 "valarg1" "i!1" "o1") (("1" (replace -4) (("1" (assert) (("1" (expand "semantic_rel" -12) (("1" (expand "nth" -12) (("1" (hide-all-but (-1 -2 -3 -14 -12 1)) (("1" (expand "part2part" -5 2) (("1" (typepred "choose
                                              ({o1: nat
                                                |
                                                semantic_rel
                                                (diagonal)
                                                (p_recursive2nat2(v),
                                                 o1)})") (("1" (case "(lop1, lop2, false_val, diagonal`4) = diagonal") (("1" (replace -1) (("1" (expand "semantic_rel" -2 1) (("1" (expand "nth" -2 1) (("1" (lemma "deterministic_expr") (("1" (inst -1 "diagonal" "p_recursive2nat2(v)" "car(diagonal`4)" "choose({o1: nat |
                                  semantic_rel(diagonal)
                                              (p_recursive2nat2(v), o1)})" "valarg!2") (("1" (assert) (("1" (replaces -1) (("1" (expand "part2part") (("1" (typepred "choose
                                    ({o1: nat
                                      |
                                      semantic_rel
                                      (f)
                                      (p_recursive2nat2
                                       (nat2p_recursive2(valarg!2)),
                                       o1)})") (("1" (rewrite "p_recursive2nat2_opposite") (("1" (expand "semantic_rel" -1 1) (("1" (expand "nth" -1) (("1" (case "(lop1, lop2, false_val, f`4) = f") (("1" (replace -1) (("1" (lemma "deterministic_expr") (("1" (inst -1 "f" "valarg!2" "car(f`4)" "choose({o1: nat | semantic_rel(f)(valarg!2, o1)})" "valarg1") (("1" (assert) (("1" (replaces -1) (("1" (expand "semantic_rel" -9) (("1" (expand "nth") (("1" (lemma "deterministic_expr") (("1" (inst -1 "nat2p_recursive2(valarg1)" "i!1" "car(nat2p_recursive2(valarg1)`4)" "o1" "o2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-6 1)) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "valarg1") (("2" (expand "member") (("2" (expand "semantic_rel") (("2" (expand "nth") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "f") (("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (prop) (("2" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "p_recursive2nat2_opposite") (("2" (hide-all-but (-4 1)) (("2" (case "(lop1, lop2, false_val, f`4) = f") (("1" (replaces -1) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (inst -1 "valarg1") (("1" (expand "member") (("1" (expand "semantic_rel") (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "f") (("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (prop) (("2" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "valarg!2") (("2" (expand "member") (("2" (expand "semantic_rel") (("2" (expand "nth") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "diagonal") (("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (prop) (("2" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil) ("3" (hide-all-but 1) (("3" (typepred "f") (("3" (expand "computable?") (("3" (expand "partial_recursive?") (("3" (prop) (("3" (inst -5 "0") (("1" (expand "nth" -5) (("1" (propax) nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "length" 1 2) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "universal") (("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (prop) (("2" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "p_recursive2nat2(m)") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "p_recursive2nat2[false_val, lop1, lop2](v)") (("2" (skoletin*) (("2" (prop) (("2" (hide-all-but (-2 1)) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -2 "p_recursive2nat2(m)") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 -3) (("2" (expand "partial_recursive?") (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (skeep) (("5" (expand "v" 1 1) (("5" (expand "nth" 1) (("5" (lift-if) (("5" (prop) (("1" (expand "valid_index_rec") (("1" (skeep) (("1" (expand "subterm") (("1" (prop) (("1" (decompose-equality) (("1" (replace -1) (("1" (expand "v") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "subterm") (("2" (expand "subterm") (("2" (decompose-equality) (("2" (replace -1) (("2" (expand "v") (("2" (expand "length" 1 2) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (typepred "f") (("1" (rewrite "map_nth_rw") (("1" (expand "v" 1) (("1" (expand "length" 1 1) (("1" (rewrite "valid_index_rec_offset" :dir rl) (("1" (expand "computable?") (("1" (expand "partial_recursive?") (("1" (prop) (("1" (inst -5 "i!1-1") (("1" (rewrite "length_append") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (expand "valid_index_rec") (("1" (skeep) (("1" (inst? -5) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "computable?") (("2" (rewrite "map_length") nil nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (typepred "i!1") (("2" (expand "v" -1) (("2" (expand "length" -1 1) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_nth_rw") (("2" (expand "v" 2) (("2" (expand "length" 2 3) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "valid_index_rec_offset" :dir rl) (("2" (typepred "diagonal") (("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (prop) (("2" (inst -5 "-1 - length(f`4) + i!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "i!1") (("2" (expand "v" -1) (("2" (expand "length" -1 1) (("2" (rewrite "length_append") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((offset_rec def-decl "PVS0Expr" pvs0_lang nil) (map adt-def-decl "list[T1]" list_adt_map nil) (append def-decl "list[T]" list_props nil) (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil) (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (rec adt-constructor-decl "[[nat, PVS0Expr] -> (rec?)]" PVS0Expr_adt nil) (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (map_nth_rw formula-decl nil more_map_props nil) (i!1 skolem-const-decl "below[length(v`4)]" fixedpoint nil) (valid_index_rec_offset formula-decl nil pvs0_lang nil) (int_plus_int_is_int application-judgement "int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (subterm adt-def-decl "boolean" PVS0Expr_adt nil) (get_arg shared-adt-accessor-decl "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt nil) (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (get_from_list adt-accessor-decl "[(rec?) -> nat]" PVS0Expr_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (semantic_rel const-decl "bool" pvs0_lang nil) (p_recursive2nat2 const-decl "nat" pvs0_computable nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (TRUE const-decl "bool" booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil) (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt nil) (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (deterministic formula-decl nil pvs0_lang nil) (nat2p_recursive2_opposite formula-decl nil pvs0_computable nil) (semantic_rel_expr inductive-decl "bool" pvs0_expr nil) (tuple2nat const-decl "nat" tuple2nat "numbers/") (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length_append formula-decl nil list_props nil) (f skolem-const-decl "computable[false_val, lop1, lop2]" fixedpoint nil) (map_list_composition formula-decl nil map_props nil) (below type-eq-decl nil naturalnumbers nil) (valid_index_rec const-decl "bool" pvs0_lang nil) (nat2p_recursive2 const-decl "partial_recursive" pvs0_computable nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (valarg!2 skolem-const-decl "nat" fixedpoint nil) (p_recursive2nat2_opposite formula-decl nil pvs0_computable nil) (deterministic_expr formula-decl nil pvs0_expr nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (add_rec_list2 formula-decl nil pvs0_lang nil) (offset_composition2 formula-decl nil pvs0_lang nil) (map_append formula-decl nil more_lists nil) (int_minus_int_is_int application-judgement "int" integers nil) (map_length formula-decl nil more_map_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nth_append formula-decl nil more_list_props "structures/") (add_rec_list formula-decl nil pvs0_lang nil) (eval_op2 const-decl "Val" pvs0_expr nil) (double_nat_enum_inv const-decl "nat" nat_list_enum "numbers/") (nat_list_enum_inv const-decl "nat" nat_list_enum "numbers/") (listPVS02nat_limit const-decl "nat" pvs0_computable nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (rat_minus_rat_is_rat application-judgement "rat" rationals nil) (nth def-decl "T" list_props nil) (diagonal skolem-const-decl "computable[false_val, lop1, lop2]" fixedpoint nil) (partial_recursive type-eq-decl nil pvs0_computable nil) (part2part const-decl "partial_recursive" fixedpoint nil) (v skolem-const-decl "[list[[nat -> nat]], list[[[nat, nat] -> nat]], nat, (cons?[PVS0Expr[nat]])]" fixedpoint nil) (partial_recursive? const-decl "bool" pvs0_computable nil) (computable type-eq-decl nil pvs0_computable nil) (computable? const-decl "bool" pvs0_computable nil) (lop1 formal-const-decl "list[[nat -> nat]]" fixedpoint nil) (false_val formal-const-decl "nat" fixedpoint nil) (PVS0 type-eq-decl nil pvs0_expr nil) (lPVS0Expr type-eq-decl nil pvs0_expr nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (EvalOp2 type-eq-decl nil pvs0_expr nil) (EvalOp1 type-eq-decl nil pvs0_expr nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" PVS0Expr_adt nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (PVS0Expr type-decl nil PVS0Expr_adt nil) (below type-eq-decl nil nat_types nil) (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" fixedpoint nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (diagonal_function formula-decl nil fixedpoint nil) (universal_PVS0_program formula-decl nil fixedpoint nil) (tuple2nat_assump formula-decl nil fixedpoint nil)) nil))("fixedpoint" fixedpoint IMP_pvs0_computable_TCC1 0 (IMP_pvs0_computable_TCC1-1 nil 3757945526 ("" (assuming-tcc) nil nil) nil nil))("pvs0_halting" pvs0_halting pvs0_Rice_theorem 0 (pvs0_Rice_theorem-1 nil 3748879518 ("" (skeep) (("" (prop) (("1" (expand "emptyset") (("1" (expand "fullset") (("1" (decompose-equality) (("1" (decompose-equality) (("1" (skeep) (("1" (name "opp" "(lop1,lop2,false_val,cons(ite(rec(1,rec(1+length(decider`4)+length(x!2`4)+length(x!1`4),vr)),rec(1+length(decider`4),vr),rec(1+length(decider`4)+length(x!2`4),vr)), append(map(offset_rec(1))(decider`4),append(map(offset_rec(1+length(decider`4)))(x!2`4),map(offset_rec(1+length(decider`4)+length(x!2`4)))(x!1`4)))))") (("1" (lemma "selfprint_assump") (("1" (inst -1 "opp") (("1" (skeep) (("1" (beta) (("1" (inst -4 "(lop1, lop2, false_val,
                                 append(opp`4,
                                        map(offset_rec(length(opp`4)))(print`4)))") (("1" (typepred "P") (("1" (expand "is_semantic_predicate?") (("1" (inst -1 "(lop1, lop2, false_val,
                     append(opp`4, map(offset_rec(length(opp`4)))(print`4)))" "_") (("1" (prop) (("1" (inst -2 "x!2") (("1" (expand "extend") (("1" (assert) (("1" (skeep) (("1" (expand "semantic_rel") (("1" (expand "opp" -2 3) (("1" (expand "append" -2 2) (("1" (expand "nth" -2) (("1" (expand "semantic_rel_expr" -2) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -1) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -3) (("1" (replaces -3) (("1" (expand "opp" -2 3) (("1" (expand "append" -2 2) (("1" (expand "nth" -2) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil) ("2" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 1) (("1" (expand "append" -2 1) (("1" (lemma "add_rec_list") (("1" (inst -1 "false_val" "nth(x!2`4,0)" "append(x!2`4,
                                                                                     append( map
                                                                                      (offset_rec
                                                                                       (length(x!2`4)))
                                                                                      (x!1`4),
                                                                                    map
                                                                                    (offset_rec(length(opp`4)-1-length(decider`4)))(print`4)))" "cons(ite(rec(1,
                                                                                     rec
                                                                                     (1 + length(decider`4) + length(x!1`4)
                                                                                      +
                                                                                      length(x!2`4),
                                                                                      vr)),
                                                                                 rec(1 + length(decider`4), vr),
                                                                                 rec(1 + length(decider`4) + length(x!2`4),
                                                                                     vr)), map(offset_rec(1))(decider`4))" "lop1" "lop2" "i" "o1") (("1" (expand "length" -1 10) (("1" (rewrite "map_length") (("1" (case "append(cons(ite
                                                                                                    (rec
                                                                                                     (1,
                                                                                                      rec
                                                                                                      (1 + length(decider`4)
                                                                                                       +
                                                                                                       length(x!1`4)
                                                                                                       +
                                                                                                       length(x!2`4),
                                                                                                       vr)),
                                                                                                     rec(1 + length(decider`4), vr),
                                                                                                     rec
                                                                                                     (1 + length(decider`4)
                                                                                                      +
                                                                                                      length(x!2`4),
                                                                                                      vr)),
                                                                                                    map(offset_rec(1))(decider`4)),
                                                                                               map(offset_rec(1 + length(decider`4)))
                                                                                                  (append
                                                                                                   (x!2`4,
                                                                                                    append
                                                                                                    (map
                                                                                                     (offset_rec(length(x!2`4)))(x!1`4),
                                                                                                     map
                                                                                                     (offset_rec
                                                                                                      (length(opp`4) - 1
                                                                                                       -
                                                                                                       length(decider`4)))
                                                                                                     (print`4))))) = cons(ite(rec(1,
                                                                                                   rec
                                                                                                   (1 + length(decider`4) + length(x!1`4)
                                                                                                    +
                                                                                                    length(x!2`4),
                                                                                                    vr)),
                                                                                               rec(1 + length(decider`4), vr),
                                                                                               rec(1 + length(decider`4) + length(x!2`4),
                                                                                                   vr)),
                                                                                           append(append
                                                                                                  (map(offset_rec(1))(decider`4),
                                                                                                   append
                                                                                                   (map
                                                                                                    (offset_rec(1 + length(decider`4)))
                                                                                                    (x!2`4),
                                                                                                    map
                                                                                                    (offset_rec
                                                                                                     (1 + length(decider`4)
                                                                                                      +
                                                                                                      length(x!2`4)))
                                                                                                    (x!1`4))),
                                                                                                  map
                                                                                                  (offset_rec(length(opp`4)))(print`4)))") (("1" (replaces -1) (("1" (expand "length" -1 14) (("1" (rewrite "map_length") (("1" (rewrite "map_nth_rw") (("1" (assert) (("1" (lemma "add_rec_list2") (("1" (inst -1 "false_val" "nth(x!2`4, 0)" "x!2`4" "append(map
                                                                                              (offset_rec(length(x!2`4)))(x!1`4),
                                                                                              map
                                                                                              (offset_rec
                                                                                               (length(opp`4) - 1
                                                                                                -
                                                                                                length(decider`4)))
                                                                                              (print`4))" "lop1" "lop2" "i" "o1") (("1" (assert) (("1" (hide-all-but (-1 -9 4)) (("1" (typepred "x!2") (("1" (expand "partial_recursive?") (("1" (prop) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (use "deterministic_expr") (("1" (assert) (("1" (case "x!2=(x!2`1,x!2`2,x!2`3,x!2`4)") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (expand "opp" 1) (("3" (expand "length" 1 1) (("3" (rewrite "length_append") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide-all-but 1) (("4" (typepred "x!2") (("4" (expand "partial_recursive?") (("4" (prop) (("4" (inst -5 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (expand "length" 1 1) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "append" 1 1) (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "map_append") (("2" (rewrite "map_append") (("2" (rewrite "map_list_composition") (("2" (rewrite "map_list_composition") (("2" (rewrite "offset_composition2") (("2" (rewrite "offset_composition2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "opp" 1) (("3" (expand "length" 1 1) (("3" (rewrite "length_append") (("3" (rewrite "map_length") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (expand "opp" 1) (("3" (expand "length" 1 1) (("3" (rewrite "length_append") (("3" (rewrite "map_length") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (expand "length" 1 4) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (expand "opp") (("2" (expand "length" -1 4) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (expand "length" -1 6) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "opp") (("2" (expand "append" 1 1) (("2" (expand "length" 1 2) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replaces -1 :dir rl) (("2" (expand "semantic_rel_expr" -3) (("2" (skeep) (("2" (prop) (("1" (expand "semantic_rel_expr" -5) (("1" (skeep) (("1" (expand "semantic_rel_expr" -5) (("1" (replaces -5) (("1" (prop) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (hide-all-but -1) (("1" (expand "opp") (("1" (expand "length" -1 4) (("1" (rewrite "length_append") (("1" (rewrite "length_append") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" -1 4) (("2" (expand "length" -1 6) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (rewrite "map_nth_rw") (("1" (inst -9 "i") (("1" (lemma "deterministic_expr") (("1" (assert) (("1" (replaces -1 :dir rl) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 1) (("1" (expand "append" -2 1) (("1" (rewrite "append_assoc") (("1" (lemma "add_rec_list") (("1" (inst -1 "false_val" "nth(decider`4,0)" "append(decider`4,
                                                                                            append
                                                                                            (append
                                                                                             (map
                                                                                              (offset_rec(length(decider`4)))
                                                                                              (x!2`4),
                                                                                              map
                                                                                              (offset_rec
                                                                                               (length(decider`4)
                                                                                                +
                                                                                                length(x!2`4)))
                                                                                              (x!1`4)),
                                                                                             map
                                                                                             (offset_rec(length(opp`4)-1))
                                                                                             (print`4)))" "(: ite(rec(1,
                                                                                             rec
                                                                                             (1 + length(decider`4) + length(x!1`4)
                                                                                              +
                                                                                              length(x!2`4),
                                                                                              vr)),
                                                                                         rec(1 + length(decider`4), vr),
                                                                                         rec(1 + length(decider`4) + length(x!2`4),
                                                                                             vr)) :)" "lop1" "lop2" "valarg!1" "false_val") (("1" (expand "append" -1 4) (("1" (expand "append" -1 4) (("1" (expand "length" -1 11) (("1" (expand "length" -1 11) (("1" (expand "length" -1 15) (("1" (expand "length" -1 15) (("1" (case "cons(ite(rec(1,
                                                                                                             rec
                                                                                                             (1 + length(decider`4)
                                                                                                              +
                                                                                                              length(x!1`4)
                                                                                                              +
                                                                                                              length(x!2`4),
                                                                                                              vr)),
                                                                                                         rec(1 + length(decider`4), vr),
                                                                                                         rec(1 + length(decider`4)
                                                                                                             +
                                                                                                             length(x!2`4),
                                                                                                             vr)),
                                                                                                     map(offset_rec(1))
                                                                                                        (append(decider`4,
                                                                                                                append
                                                                                                                (append
                                                                                                                 (map
                                                                                                                  (offset_rec(length(decider`4)))
                                                                                                                  (x!2`4),
                                                                                                                  map
                                                                                                                  (offset_rec
                                                                                                                   (length(decider`4)
                                                                                                                    +
                                                                                                                    length(x!2`4)))
                                                                                                                  (x!1`4)),
                                                                                                                 map
                                                                                                                 (offset_rec(length(opp`4) - 1))
                                                                                                                 (print`4))))) = cons(ite(rec(1,
                                                                                                           rec
                                                                                                           (1 + length(decider`4) + length(x!1`4)
                                                                                                            +
                                                                                                            length(x!2`4),
                                                                                                            vr)),
                                                                                                       rec(1 + length(decider`4), vr),
                                                                                                       rec(1 + length(decider`4) + length(x!2`4),
                                                                                                           vr)),
                                                                                                   append(map(offset_rec(1))(decider`4),
                                                                                                          append
                                                                                                          (append
                                                                                                           (map
                                                                                                            (offset_rec(1 + length(decider`4)))
                                                                                                            (x!2`4),
                                                                                                            map
                                                                                                            (offset_rec
                                                                                                             (1 + length(decider`4)
                                                                                                              +
                                                                                                              length(x!2`4)))
                                                                                                            (x!1`4)),
                                                                                                           map
                                                                                                           (offset_rec(length(opp`4)))
                                                                                                           (print`4))))") (("1" (replaces -1) (("1" (assert) (("1" (lemma "add_rec_list2") (("1" (inst -1 "false_val" "nth(decider`4, 0)" "decider`4" "append(append
                                                                                                      (map
                                                                                                       (offset_rec(length(decider`4)))
                                                                                                       (x!2`4),
                                                                                                       map
                                                                                                       (offset_rec
                                                                                                        (length(decider`4) + length(x!2`4)))
                                                                                                       (x!1`4)),
                                                                                                      map
                                                                                                      (offset_rec(length(opp`4) - 1))
                                                                                                      (print`4))" "lop1" "lop2" "valarg!1" "false_val") (("1" (expand "opp" -4 2) (("1" (expand "nth" -4) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (split -4) (("1" (flatten -1) (("1" (expand "map" -2 5) (("1" (expand "nth") (("1" (assert) (("1" (assert) (("1" (hide-all-but (-3 2 -7 -6)) (("1" (reveal -11) (("1" (inst?) (("1" (inst -3 "valarg!1") (("1" (assert) (("1" (replace -3) (("1" (hide-all-but (-2 1)) (("1" (typepred "decider") (("1" (expand "computable?") (("1" (expand "partial_recursive?") (("1" (prop) (("1" (assert) (("1" (case "decider=(decider`1,decider`2,decider`3,decider`4)") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (hide-all-but 1) (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1)) (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (hide-all-but 1) (("3" (typepred "decider") (("3" (expand "computable?") (("3" (expand "partial_recursive?") (("3" (prop) (("3" (inst -5 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_append") (("2" (rewrite "map_append") (("2" (rewrite "map_list_composition") (("2" (rewrite "map_append") (("2" (rewrite "map_list_composition") (("2" (rewrite "offset_composition2") (("2" (rewrite "offset_composition2") (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (assert) (("2" (rewrite "map_list_composition") (("2" (rewrite "offset_composition2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" 1) (("2" (expand "length " 1 1) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" 1 2) (("2" (expand "length" 1 6) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (expand "opp" 1 2) (("2" (expand "length" 1 6) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (expand "opp" 1 2) (("2" (expand "length" 1 3) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "x!1") (("2" (expand "extend") (("2" (assert) (("2" (skeep) (("2" (expand "semantic_rel") (("2" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 3) (("1" (expand "nth" -2) (("1" (expand "semantic_rel_expr" -2) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -3) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -5) (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel_expr" -7) (("1" (replaces -7) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -1) (("1" (expand "length" -1 4) (("1" (hide-all-but -1) (("1" (rewrite "length_append") (("1" (rewrite "length_append") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" -1 4) (("2" (expand "length" -1 6) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (inst -10 "i") (("2" (rewrite "map_nth_rw") (("2" (lemma "deterministic_expr") (("2" (inst -1 "(lop1,lop2,false_val,append(opp`4,
                                                                           map(offset_rec(length(opp`4)))(print`4)))" "i" "offset_rec(length(opp`4))(nth(print`4, 0))" "p_recursive2nat(lop1,
                                                                                    lop2,
                                                                                    false_val,
                                                                                    append
                                                                                    (opp`4,
                                                                                     map
                                                                                     (offset_rec(length(opp`4)))
                                                                                     (print`4)))" "valarg_1") (("2" (assert) (("2" (replaces -1) (("2" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 3) (("1" (expand "nth" -2) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 1) (("1" (expand "append" -2 1) (("1" (lemma "add_rec_list") (("1" (inst -1 "false_val" "nth(decider`4,0)" "append(append
                                                                                                (decider`4,
                                                                                                 append
                                                                                                 (map
                                                                                                  (offset_rec( length(decider`4)))
                                                                                                  (x!2`4),
                                                                                                  map
                                                                                                  (offset_rec
                                                                                                   ( length(decider`4)
                                                                                                    +
                                                                                                    length(x!2`4)))
                                                                                                  (x!1`4))),
                                                                                                map
                                                                                                (offset_rec(length(opp`4)-1))(print`4))" "(:ite(rec(1,
                                                                                                 rec
                                                                                                 (1 + length(decider`4) + length(x!1`4)
                                                                                                  +
                                                                                                  length(x!2`4),
                                                                                                  vr)),
                                                                                             rec(1 + length(decider`4), vr),
                                                                                             rec(1 + length(decider`4) + length(x!2`4),
                                                                                                 vr)):)" "lop1" "lop2" "valarg_1" "valarg") (("1" (expand "append" -1 4) (("1" (expand "append" -1 4) (("1" (expand "length" -1 11) (("1" (expand "length" -1 11) (("1" (expand "length" -1 15) (("1" (expand "length" -1 15) (("1" (case " cons(ite(rec(1,
                                                                                                       rec
                                                                                                       (1 + length(decider`4)
                                                                                                        +
                                                                                                        length(x!1`4)
                                                                                                        +
                                                                                                        length(x!2`4),
                                                                                                        vr)),
                                                                                                   rec(1 + length(decider`4), vr),
                                                                                                   rec(1 + length(decider`4)
                                                                                                       +
                                                                                                       length(x!2`4),
                                                                                                       vr)),
                                                                                               map(offset_rec(1))
                                                                                                  (append(append
                                                                                                          (decider`4,
                                                                                                           append
                                                                                                           (map
                                                                                                            (offset_rec(length(decider`4)))
                                                                                                            (x!2`4),
                                                                                                            map
                                                                                                            (offset_rec
                                                                                                             (length(decider`4)
                                                                                                              +
                                                                                                              length(x!2`4)))
                                                                                                            (x!1`4))),
                                                                                                          map
                                                                                                          (offset_rec(length(opp`4) - 1))
                                                                                                          (print`4)))) = cons(ite(rec(1,
                                                                                                     rec
                                                                                                     (1 + length(decider`4) + length(x!1`4)
                                                                                                      +
                                                                                                      length(x!2`4),
                                                                                                      vr)),
                                                                                                 rec(1 + length(decider`4), vr),
                                                                                                 rec(1 + length(decider`4) + length(x!2`4),
                                                                                                     vr)),
                                                                                             append(append
                                                                                                    (map(offset_rec(1))(decider`4),
                                                                                                     append
                                                                                                     (map
                                                                                                      (offset_rec(1 + length(decider`4)))
                                                                                                      (x!2`4),
                                                                                                      map
                                                                                                      (offset_rec
                                                                                                       (1 + length(decider`4)
                                                                                                        +
                                                                                                        length(x!2`4)))
                                                                                                      (x!1`4))),
                                                                                                    map
                                                                                                    (offset_rec(length(opp`4)))(print`4)))") (("1" (replaces -1) (("1" (assert) (("1" (rewrite "map_nth_rw") (("1" (assert) (("1" (rewrite "append_assoc") (("1" (lemma "add_rec_list2") (("1" (inst -1 "false_val" "nth(decider`4, 0)" "decider`4" "append(append
                                                                                                          (map
                                                                                                           (offset_rec(length(decider`4)))
                                                                                                           (x!2`4),
                                                                                                           map
                                                                                                           (offset_rec
                                                                                                            (length(decider`4) + length(x!2`4)))
                                                                                                           (x!1`4)),
                                                                                                          map
                                                                                                          (offset_rec(length(opp`4) - 1))
                                                                                                          (print`4))" "lop1" "lop2" "valarg_1" "valarg") (("1" (assert) (("1" (hide-all-but (-1 -11 2)) (("1" (typepred "decider") (("1" (expand "computable?") (("1" (expand "partial_recursive?") (("1" (prop) (("1" (case "decider=(decider`1,decider`2,decider`3,decider`4)") (("1" (replaces -1) (("1" (assert) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (lemma "deterministic_expr") (("1" (inst?) (("1" (inst -1 "false_val") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (hide-all-but 1) (("3" (typepred "decider") (("3" (expand "computable?") (("3" (expand "partial_recursive?") (("3" (prop) (("3" (inst -5 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "map_append") (("2" (rewrite "map_append") (("2" (rewrite "map_append") (("2" (rewrite "map_list_composition") (("2" (rewrite "map_list_composition") (("2" (rewrite "map_list_composition") (("2" (rewrite "offset_composition2") (("2" (rewrite "offset_composition2") (("2" (rewrite "offset_composition2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "opp") (("2" (expand "length" 1 1) (("2" (rewrite "length_append") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "opp" 1 2) (("2" (expand "length" 1 6) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (rewrite "length_append") (("2" (expand "opp" 1 2) (("2" (expand "length" 1 6) (("2" (rewrite "map_length") (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "semantic_rel_expr" -2) (("2" (skeep) (("2" (expand "semantic_rel_expr" -2) (("2" (replaces -2) (("2" (prop) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (expand "opp" -2 3) (("1" (expand "nth" -2) (("1" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil) ("2" (rewrite "map_length") (("2" (assert) (("2" (rewrite "nth_append") (("1" (lift-if) (("1" (prop) (("1" (rewrite "map_length") (("1" (assert) nil nil)) nil) ("2" (rewrite "map_length") (("2" (assert) (("2" (expand "opp" -1 1) (("2" (expand "append" -1 1) (("2" (lemma "add_rec_list") (("2" (inst -1 "false_val" "nth(x!1`4,0)" "append(
                                                                                              x!1`4, map
                                                                                            (offset_rec(length(opp`4) -1 -length(decider`4) -length(x!2`4)))(print`4))" " cons(ite(rec(1,
                                                                                             rec
                                                                                             (1 + length(decider`4) + length(x!1`4)
                                                                                              +
                                                                                              length(x!2`4),
                                                                                              vr)),
                                                                                         rec(1 + length(decider`4), vr),
                                                                                         rec(1 + length(decider`4) + length(x!2`4),
                                                                                             vr)),append
                                                                                            (map(offset_rec(1))(decider`4),
                                                                                            map
                                                                                              (offset_rec(1 + length(decider`4)))
                                                                                              (x!2`4)))" "lop1" "lop2" "i" "o1") (("1" (expand "append" -1 2) (("1" (expand "length" -1 11) (("1" (rewrite "length_append") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (expand "length" -1 16) (("1" (rewrite "length_append") (("1" (rewrite "length_append") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (rewrite "map_length") (("1" (case " cons(ite(rec(1,
                                                                                                             rec
                                                                                                             (1 + length(decider`4)
                                                                                                              +
                                                                                                              length(x!1`4)
                                                                                                              +
                                                                                                              length(x!2`4),
                                                                                                              vr)),
                                                                                                         rec(1 + length(decider`4), vr),
                                                                                                         rec(1 + length(decider`4)
                                                                                                             +
                                                                                                             length(x!2`4),
                                                                                                             vr)),
                                                                                                     append(append
                                                                                                            (map(offset_rec(1))(decider`4),
                                                                                                             map
                                                                                                             (offset_rec(1 + length(decider`4)))
                                                                                                             (x!2`4)),
                                                                                                            map
                                                                                                            (offset_rec
                                                                                                             (1 + length(decider`4)
                                                                                                              +
                                                                                                              length(x!2`4)))
                                                                                                            (append
                                                                                                             (x!1`4,
                                                                                                              map
                                                                                                              (offset_rec
                                                                                                               (length(opp`4) - 1
                                                                                                                -
                                                                                                                length(decider`4)
                                                                                                                -
                                                                                                                length(x!2`4)))
                                                                                                              (print`4))))) = cons(ite(rec(1,
                                                                                                           rec
                                                                                                           (1 + length(decider`4) + length(x!1`4)
                                                                                                            +
                                                                                                            length(x!2`4),
                                                                                                            vr)),
                                                                                                       rec(1 + length(decider`4), vr),
                                                                                                       rec(1 + length(decider`4) + length(x!2`4),
                                                                                                           vr)),
                                                                                                   append(append
                                                                                                          (map(offset_rec(1))(decider`4),
                                                                                                           append
                                                                                                           (map
                                                                                                            (offset_rec(1 + length(decider`4)))
                                                                                                            (x!2`4),
                                                                                                            map
                                                                                                            (offset_rec
                                                                                                             (1 + length(decider`4)
                                                                                                              +
                                                                                                              length(x!2`4)))
                                                                                                            (x!1`4))),
                                                                                                          map
                                                                                                          (offset_rec(length(opp`4)))(print`4)))") (("1" (replaces -1) (("1" (rewrite "map_nth_rw") (("1" (assert) (("1" (lemma "add_rec_list2") (("1" (inst -1 "false_val" "nth(x!1`4, 0)" "x!1`4" "map(offset_rec(length(opp`4) - 1
                                                                                                              -
                                                                                                              length(decider`4)
                                                                                                              -
                                                                                                              length(x!2`4)))
                                                                                                  (print`4)" "lop1" "lop2" "i" "o1") (("1" (assert) (("1" (hide-all-but (-1 -10 4)) (("1" (typepred "x!1") (("1" (case "x!1=(x!1`1,x!1`2,x!1`3,x!1`4)") (("1" (replaces -1) (("1" (assert) (("1" (expand "partial_recursive?") (("1" (prop) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (use "deterministic_expr") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (decompose-equality) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (hide-all-but 1) (("3" (typepred "x!1") (("3" (expand "partial_recursive?") (("3" (prop) (("3" (inst -5 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "append_assoc") (("2" (rewrite "map_append") (("2" (rewrite "map_list_composition") (("2" (rewrite "offset_composition2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" 1) (("2" (expand "length" 1 3) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "opp" 1 2) (("2" (expand "length" 1 5) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (expand "opp" 1 2) (("2" (expand "length" 1 5) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (rewrite "map_length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "(lop1,lop2,false_val,(:cnst(false_val):))") (("1" (skeep) (("1" (prop) (("1" (expand "semantic_rel") (("1" (expand "nth") (("1" (expand "semantic_rel_expr") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (lemma "tuple2nat_assump") (("2" (assert) (("2" (replace -1) (("2" (expand "terminating?") (("2" (expand "terminates_expr") (("2" (hide -1) (("2" (expand "nth") (("2" (expand "semantic_rel_expr") (("2" (prop) (("1" (skeep) (("1" (typepred "i") (("1" (expand "length") (("1" (expand "length") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "(lop1,lop2,false_val,(:cnst(true_val):))") (("1" (skeep) (("1" (prop) (("1" (grind) nil nil) ("2" (expand "semantic_rel") (("2" (expand "nth") (("2" (expand "semantic_rel_expr") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "computable?") (("2" (expand "partial_recursive?") (("2" (lemma "tuple2nat_assump") (("2" (replace -1) (("2" (hide -1) (("2" (expand "terminating?") (("2" (expand "terminates_expr") (("2" (expand "nth") (("2" (expand "semantic_rel_expr") (("2" (prop) (("1" (grind) nil nil) ("2" (skeep) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fullset const-decl "set" sets nil) (TRUE const-decl "bool" booleans nil) (offset_rec def-decl "PVS0Expr" pvs0_lang nil) (map adt-def-decl "list[T1]" list_adt_map nil) (append def-decl "list[T]" list_props nil) (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil) (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (computable type-eq-decl nil pvs0_computable nil) (computable? const-decl "bool" pvs0_computable nil) (length def-decl "nat" list_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (rec adt-constructor-decl "[[nat, PVS0Expr] -> (rec?)]" PVS0Expr_adt nil) (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (ite adt-constructor-decl "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil) (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (semantic_rel const-decl "bool" pvs0_lang nil) (semantic_rel_expr inductive-decl "bool" pvs0_expr nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (map_length formula-decl nil more_map_props nil) (add_rec_list formula-decl nil pvs0_lang nil) (below type-eq-decl nil naturalnumbers nil) (map_nth_rw formula-decl nil more_map_props nil) (add_rec_list2 formula-decl nil pvs0_lang nil) (length_append formula-decl nil list_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (deterministic_expr formula-decl nil pvs0_expr nil) (valid_index_rec const-decl "bool" pvs0_lang nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (append_assoc formula-decl nil list_props nil) (map_append formula-decl nil map_append nil) (map_list_composition formula-decl nil map_props nil) (offset_composition2 formula-decl nil pvs0_lang nil) (int_plus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (x!1 skolem-const-decl "partial_recursive[false_val, lop1, lop2]" pvs0_halting nil) (x!2 skolem-const-decl "partial_recursive[false_val, lop1, lop2]" pvs0_halting nil) (decider skolem-const-decl "computable[false_val, lop1, lop2]" pvs0_halting nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nth_append formula-decl nil more_list_props "structures/") (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (p_recursive2nat const-decl "nat" pvs0_computable nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (nth def-decl "T" list_props nil) (print skolem-const-decl "partial_recursive[false_val, lop1, lop2]" pvs0_halting nil) (opp skolem-const-decl "[list[[nat -> nat]], list[[[nat, nat] -> nat]], nat, (cons?[PVS0Expr[nat]])]" pvs0_halting nil) (selfprint_assump formula-decl nil pvs0_halting nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (EvalOp1 type-eq-decl nil pvs0_expr nil) (EvalOp2 type-eq-decl nil pvs0_expr nil) (PVS0Expr type-decl nil PVS0Expr_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (every adt-def-decl "boolean" PVS0Expr_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (lPVS0Expr type-eq-decl nil pvs0_expr nil) (PVS0 type-eq-decl nil pvs0_expr nil) (false_val formal-const-decl "nat" pvs0_halting nil) (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil) (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting nil) (partial_recursive? const-decl "bool" pvs0_computable nil) (partial_recursive type-eq-decl nil pvs0_computable nil) (pred type-eq-decl nil defined_types nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (is_semantic_predicate? const-decl "bool" pvs0_halting nil) (emptyset const-decl "set" sets nil) (tuple2nat_assump formula-decl nil pvs0_halting nil) (terminates_expr const-decl "bool" pvs0_expr nil) (subterm adt-def-decl "boolean" PVS0Expr_adt nil) (terminating? const-decl "bool" pvs0_lang nil) (length_singleton formula-decl nil more_list_props "structures/") (finite_emptyset name-judgement "finite_set" finite_sets nil) (rat_minus_rat_is_rat application-judgement "rat" rationals nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (double_nat_enum_inv const-decl "nat" nat_list_enum "numbers/") (nat_list_enum_inv const-decl "nat" nat_list_enum "numbers/") (listPVS02nat const-decl "nat" pvs0_to_nat nil) (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil) (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil) (/= const-decl "boolean" notequal nil) (true_val const-decl "{x: nat | x /= false_val}" pvs0_halting nil)) nil))("pvs0_halting" pvs0_halting IMP_pvs0_computable_TCC1 0 (IMP_pvs0_computable_TCC1-1 nil 3749225815 ("" (lemma "tuple2nat_assump") (("" (propax) nil nil)) nil) ((tuple2nat_assump formula-decl nil pvs0_halting nil)) nil))