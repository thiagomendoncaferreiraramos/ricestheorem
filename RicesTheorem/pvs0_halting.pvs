%************************************************************************************************%
% This theory proves that the halting problem is undecidable in computable PVS0 functions, i.e., %
% There is no computable function in PVS0[nat] that decides whether or not a partial recursvie   %
% function pvs0 in PVS0[nat] terminates on an given natural number n.                            % 
%************************************************************************************************%

pvs0_halting[false_val:nat,lop1:list[[nat->nat]],lop2:list[[[nat,nat]->nat]]] : THEORY
BEGIN

   ASSUMING
	IMPORTING pvs0_to_nat,
            structures@more_list_props
	    
	tuple2nat_assump : ASSUMPTION
	EXISTS( i : below[length(lop2)]) : nth(lop2,i) = tuple2nat

	IMPORTING pvs0_computable[false_val,lop1,lop2]


	
  ENDASSUMING
  

  true_val : {x : nat | x /= false_val}

  Oracle : (terminating?) = (
    (: LAMBDA(pb:nat) : LET (p,n) = nat2tuple(pb),
			     pvs0 = nat2p_recursive(p) IN
			IF determined?(pvs0)(n) THEN true_val ELSE false_val ENDIF :),
    (::),false_val,
    (: op1(0,vr) :))

  % The following theorem shows that Oracle is a terminating PVS0 function that decides the
  % halting problem of partial recursive functions in PVS0[nat].
  % However, that function is not computable.

  pvs0_halting_problem_decidability: THEOREM
    FORALL (pvs0:partial_recursive,n:nat): 
      (NOT semantic_rel(Oracle)(tuple2nat(p_recursive2nat(pvs0),n), false_val)) IFF determined?(pvs0)(n)

  % The following lemma shows that the halting problem is undecidable in PVS0_computable
  pvs0_halting_problem_undecidability: THEOREM
    NOT EXISTS (oracle:computable): FORALL (pvs0:partial_recursive,n:nat): 
      (NOT semantic_rel(oracle)(tuple2nat(p_recursive2nat(pvs0),n), false_val)) IFF determined?(pvs0)(n)



 
END pvs0_halting
