%%% ADT file generated from PVS0Expr

PVS0Expr_adt[T: TYPE+]: THEORY
 BEGIN
  ASSUMING
   T_TCC1: ASSUMPTION EXISTS (x: T): TRUE;
  ENDASSUMING

  PVS0Expr: TYPE

  cnst?, vr?, op1?, op2?, rec?, ite?: [PVS0Expr -> boolean]

  get_val: [(cnst?) -> T]

  get_op: [{x: PVS0Expr | op1?(x) OR op2?(x)} -> nat]

  get_arg: [{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]

  get_arg1: [(op2?) -> PVS0Expr]

  get_arg2: [(op2?) -> PVS0Expr]

  get_from_list: [(rec?) -> nat]

  get_cond: [(ite?) -> PVS0Expr]

  get_if: [(ite?) -> PVS0Expr]

  get_else: [(ite?) -> PVS0Expr]

  cnst: [T -> (cnst?)]

  vr: (vr?)

  op1: [[nat, PVS0Expr] -> (op1?)]

  op2: [[nat, PVS0Expr, PVS0Expr] -> (op2?)]

  rec: [[nat, PVS0Expr] -> (rec?)]

  ite: [[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]

  PVS0Expr_ord: [PVS0Expr -> upto(5)]

  PVS0Expr_ord_defaxiom: AXIOM
         (FORALL (get_val: T): PVS0Expr_ord(cnst(get_val)) = 0)
     AND PVS0Expr_ord(vr) = 1
     AND (FORALL (get_op: nat, get_arg: PVS0Expr):
            PVS0Expr_ord(op1(get_op, get_arg)) = 2)
     AND (FORALL (get_op: nat, get_arg1: PVS0Expr, get_arg2: PVS0Expr):
            PVS0Expr_ord(op2(get_op, get_arg1, get_arg2)) = 3)
     AND (FORALL (get_from_list: nat, get_arg: PVS0Expr):
            PVS0Expr_ord(rec(get_from_list, get_arg)) = 4)
     AND (FORALL (get_cond: PVS0Expr, get_if: PVS0Expr,
                  get_else: PVS0Expr):
            PVS0Expr_ord(ite(get_cond, get_if, get_else)) = 5);

  ord(x: PVS0Expr): [PVS0Expr -> upto(5)] =
      CASES x
        OF cnst(cnst1_var): 0,
           vr: 1,
           op1(op11_var, op12_var): 2,
           op2(op21_var, op22_var, op23_var): 3,
           rec(rec1_var, rec2_var): 4,
           ite(ite1_var, ite2_var, ite3_var): 5
        ENDCASES

  PVS0Expr_cnst_extensionality: AXIOM
    FORALL (cnst?_var: (cnst?), cnst?_var2: (cnst?)):
      get_val(cnst?_var) = get_val(cnst?_var2) IMPLIES
       cnst?_var = cnst?_var2;

  PVS0Expr_cnst_eta: AXIOM
    FORALL (cnst?_var: (cnst?)): cnst(get_val(cnst?_var)) = cnst?_var;

  PVS0Expr_vr_extensionality: AXIOM
    FORALL (vr?_var: (vr?), vr?_var2: (vr?)): vr?_var = vr?_var2;

  PVS0Expr_op1_extensionality: AXIOM
    FORALL (op1?_var: (op1?), op1?_var2: (op1?)):
      get_op(op1?_var) = get_op(op1?_var2) AND
       get_arg(op1?_var) = get_arg(op1?_var2)
       IMPLIES op1?_var = op1?_var2;

  PVS0Expr_op1_eta: AXIOM
    FORALL (op1?_var: (op1?)):
      op1(get_op(op1?_var), get_arg(op1?_var)) = op1?_var;

  PVS0Expr_op2_extensionality: AXIOM
    FORALL (op2?_var: (op2?), op2?_var2: (op2?)):
      get_op(op2?_var) = get_op(op2?_var2) AND
       get_arg1(op2?_var) = get_arg1(op2?_var2) AND
        get_arg2(op2?_var) = get_arg2(op2?_var2)
       IMPLIES op2?_var = op2?_var2;

  PVS0Expr_op2_eta: AXIOM
    FORALL (op2?_var: (op2?)):
      op2(get_op(op2?_var), get_arg1(op2?_var), get_arg2(op2?_var)) =
       op2?_var;

  PVS0Expr_rec_extensionality: AXIOM
    FORALL (rec?_var: (rec?), rec?_var2: (rec?)):
      get_from_list(rec?_var) = get_from_list(rec?_var2) AND
       get_arg(rec?_var) = get_arg(rec?_var2)
       IMPLIES rec?_var = rec?_var2;

  PVS0Expr_rec_eta: AXIOM
    FORALL (rec?_var: (rec?)):
      rec(get_from_list(rec?_var), get_arg(rec?_var)) = rec?_var;

  PVS0Expr_ite_extensionality: AXIOM
    FORALL (ite?_var: (ite?), ite?_var2: (ite?)):
      get_cond(ite?_var) = get_cond(ite?_var2) AND
       get_if(ite?_var) = get_if(ite?_var2) AND
        get_else(ite?_var) = get_else(ite?_var2)
       IMPLIES ite?_var = ite?_var2;

  PVS0Expr_ite_eta: AXIOM
    FORALL (ite?_var: (ite?)):
      ite(get_cond(ite?_var), get_if(ite?_var), get_else(ite?_var)) =
       ite?_var;

  PVS0Expr_get_val_cnst: AXIOM
    FORALL (cnst1_var: T): get_val(cnst(cnst1_var)) = cnst1_var;

  PVS0Expr_get_op_op1: AXIOM
    FORALL (op11_var: nat, op12_var: PVS0Expr):
      get_op(op1(op11_var, op12_var)) = op11_var;

  PVS0Expr_get_arg_op1: AXIOM
    FORALL (op11_var: nat, op12_var: PVS0Expr):
      get_arg(op1(op11_var, op12_var)) = op12_var;

  PVS0Expr_get_op_op2: AXIOM
    FORALL (op21_var: nat, op22_var: PVS0Expr, op23_var: PVS0Expr):
      get_op(op2(op21_var, op22_var, op23_var)) = op21_var;

  PVS0Expr_get_arg1_op2: AXIOM
    FORALL (op21_var: nat, op22_var: PVS0Expr, op23_var: PVS0Expr):
      get_arg1(op2(op21_var, op22_var, op23_var)) = op22_var;

  PVS0Expr_get_arg2_op2: AXIOM
    FORALL (op21_var: nat, op22_var: PVS0Expr, op23_var: PVS0Expr):
      get_arg2(op2(op21_var, op22_var, op23_var)) = op23_var;

  PVS0Expr_get_from_list_rec: AXIOM
    FORALL (rec1_var: nat, rec2_var: PVS0Expr):
      get_from_list(rec(rec1_var, rec2_var)) = rec1_var;

  PVS0Expr_get_arg_rec: AXIOM
    FORALL (rec1_var: nat, rec2_var: PVS0Expr):
      get_arg(rec(rec1_var, rec2_var)) = rec2_var;

  PVS0Expr_get_cond_ite: AXIOM
    FORALL (ite1_var: PVS0Expr, ite2_var: PVS0Expr, ite3_var: PVS0Expr):
      get_cond(ite(ite1_var, ite2_var, ite3_var)) = ite1_var;

  PVS0Expr_get_if_ite: AXIOM
    FORALL (ite1_var: PVS0Expr, ite2_var: PVS0Expr, ite3_var: PVS0Expr):
      get_if(ite(ite1_var, ite2_var, ite3_var)) = ite2_var;

  PVS0Expr_get_else_ite: AXIOM
    FORALL (ite1_var: PVS0Expr, ite2_var: PVS0Expr, ite3_var: PVS0Expr):
      get_else(ite(ite1_var, ite2_var, ite3_var)) = ite3_var;

  PVS0Expr_inclusive: AXIOM
    FORALL (PVS0Expr_var: PVS0Expr):
          cnst?(PVS0Expr_var) OR vr?(PVS0Expr_var) OR op1?(PVS0Expr_var)
       OR op2?(PVS0Expr_var) OR rec?(PVS0Expr_var) OR ite?(PVS0Expr_var);

  PVS0Expr_induction: AXIOM
    FORALL (p: [PVS0Expr -> boolean]):
      (     FORALL (cnst1_var: T): p(cnst(cnst1_var)) AND p(vr)
        AND FORALL (op11_var: nat, op12_var: PVS0Expr):
              p(op12_var) IMPLIES p(op1(op11_var, op12_var))
        AND FORALL (op21_var: nat, op22_var: PVS0Expr, op23_var: PVS0Expr):
              p(op22_var) AND p(op23_var) IMPLIES
               p(op2(op21_var, op22_var, op23_var))
        AND FORALL (rec1_var: nat, rec2_var: PVS0Expr):
              p(rec2_var) IMPLIES p(rec(rec1_var, rec2_var))
        AND FORALL (ite1_var: PVS0Expr, ite2_var: PVS0Expr,
                    ite3_var: PVS0Expr):
              p(ite1_var) AND p(ite2_var) AND p(ite3_var) IMPLIES
               p(ite(ite1_var, ite2_var, ite3_var)))
       IMPLIES (FORALL (PVS0Expr_var: PVS0Expr): p(PVS0Expr_var));

  every(p: PRED[T])(a: PVS0Expr):  boolean =
      CASES a
        OF cnst(cnst1_var): p(cnst1_var),
           vr: TRUE,
           op1(op11_var, op12_var): every(p)(op12_var),
           op2(op21_var, op22_var, op23_var):
             every(p)(op22_var) AND every(p)(op23_var),
           rec(rec1_var, rec2_var): every(p)(rec2_var),
           ite(ite1_var, ite2_var, ite3_var):
             every(p)(ite1_var) AND
              every(p)(ite2_var) AND every(p)(ite3_var)
        ENDCASES;

  every(p: PRED[T], a: PVS0Expr):  boolean =
      CASES a
        OF cnst(cnst1_var): p(cnst1_var),
           vr: TRUE,
           op1(op11_var, op12_var): every(p, op12_var),
           op2(op21_var, op22_var, op23_var):
             every(p, op22_var) AND every(p, op23_var),
           rec(rec1_var, rec2_var): every(p, rec2_var),
           ite(ite1_var, ite2_var, ite3_var):
             every(p, ite1_var) AND
              every(p, ite2_var) AND every(p, ite3_var)
        ENDCASES;

  some(p: PRED[T])(a: PVS0Expr):  boolean =
      CASES a
        OF cnst(cnst1_var): p(cnst1_var),
           vr: FALSE,
           op1(op11_var, op12_var): some(p)(op12_var),
           op2(op21_var, op22_var, op23_var):
             some(p)(op22_var) OR some(p)(op23_var),
           rec(rec1_var, rec2_var): some(p)(rec2_var),
           ite(ite1_var, ite2_var, ite3_var):
             some(p)(ite1_var) OR some(p)(ite2_var) OR some(p)(ite3_var)
        ENDCASES;

  some(p: PRED[T], a: PVS0Expr):  boolean =
      CASES a
        OF cnst(cnst1_var): p(cnst1_var),
           vr: FALSE,
           op1(op11_var, op12_var): some(p, op12_var),
           op2(op21_var, op22_var, op23_var):
             some(p, op22_var) OR some(p, op23_var),
           rec(rec1_var, rec2_var): some(p, rec2_var),
           ite(ite1_var, ite2_var, ite3_var):
             some(p, ite1_var) OR some(p, ite2_var) OR some(p, ite3_var)
        ENDCASES;

  subterm(x: PVS0Expr, y: PVS0Expr):  boolean =
      x = y OR
       CASES y
         OF cnst(cnst1_var): FALSE,
            vr: FALSE,
            op1(op11_var, op12_var): subterm(x, op12_var),
            op2(op21_var, op22_var, op23_var):
              subterm(x, op22_var) OR subterm(x, op23_var),
            rec(rec1_var, rec2_var): subterm(x, rec2_var),
            ite(ite1_var, ite2_var, ite3_var):
              subterm(x, ite1_var) OR
               subterm(x, ite2_var) OR subterm(x, ite3_var)
         ENDCASES;

  <<:  (strict_well_founded?[PVS0Expr]) =
      LAMBDA (x, y: PVS0Expr):
        CASES y
          OF cnst(cnst1_var): FALSE,
             vr: FALSE,
             op1(op11_var, op12_var): x = op12_var OR x << op12_var,
             op2(op21_var, op22_var, op23_var):
               (x = op22_var OR x << op22_var) OR
                x = op23_var OR x << op23_var,
             rec(rec1_var, rec2_var): x = rec2_var OR x << rec2_var,
             ite(ite1_var, ite2_var, ite3_var):
                   x = ite1_var OR x << ite1_var OR x = ite2_var
                OR x << ite2_var OR x = ite3_var OR x << ite3_var
          ENDCASES;

  PVS0Expr_well_founded: AXIOM strict_well_founded?[PVS0Expr](<<);

  reduce_nat(cnst?_fun: [T -> nat], vr?_fun: nat,
             op1?_fun: [[nat, nat] -> nat],
             op2?_fun: [[nat, nat, nat] -> nat],
             rec?_fun: [[nat, nat] -> nat],
             ite?_fun: [[nat, nat, nat] -> nat]):
        [PVS0Expr -> nat] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr):
        LET red: [PVS0Expr -> nat] =
              reduce_nat(cnst?_fun, vr?_fun, op1?_fun, op2?_fun, rec?_fun,
                         ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var),
               vr: vr?_fun,
               op1(op11_var, op12_var): op1?_fun(op11_var, red(op12_var)),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var)),
               rec(rec1_var, rec2_var): rec?_fun(rec1_var, red(rec2_var)),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var))
            ENDCASES;

  REDUCE_nat(cnst?_fun: [[T, PVS0Expr] -> nat], vr?_fun: [PVS0Expr -> nat],
             op1?_fun: [[nat, nat, PVS0Expr] -> nat],
             op2?_fun: [[nat, nat, nat, PVS0Expr] -> nat],
             rec?_fun: [[nat, nat, PVS0Expr] -> nat],
             ite?_fun: [[nat, nat, nat, PVS0Expr] -> nat]):
        [PVS0Expr -> nat] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr):
        LET red: [PVS0Expr -> nat] =
              REDUCE_nat(cnst?_fun, vr?_fun, op1?_fun, op2?_fun, rec?_fun,
                         ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var, PVS0Expr_adtvar),
               vr: vr?_fun(PVS0Expr_adtvar),
               op1(op11_var, op12_var):
                 op1?_fun(op11_var, red(op12_var), PVS0Expr_adtvar),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var),
                          PVS0Expr_adtvar),
               rec(rec1_var, rec2_var):
                 rec?_fun(rec1_var, red(rec2_var), PVS0Expr_adtvar),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var),
                          PVS0Expr_adtvar)
            ENDCASES;

  reduce_ordinal(cnst?_fun: [T -> ordinal], vr?_fun: ordinal,
                 op1?_fun: [[nat, ordinal] -> ordinal],
                 op2?_fun: [[nat, ordinal, ordinal] -> ordinal],
                 rec?_fun: [[nat, ordinal] -> ordinal],
                 ite?_fun: [[ordinal, ordinal, ordinal] -> ordinal]):
        [PVS0Expr -> ordinal] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr):
        LET red: [PVS0Expr -> ordinal] =
              reduce_ordinal(cnst?_fun, vr?_fun, op1?_fun, op2?_fun,
                             rec?_fun, ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var),
               vr: vr?_fun,
               op1(op11_var, op12_var): op1?_fun(op11_var, red(op12_var)),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var)),
               rec(rec1_var, rec2_var): rec?_fun(rec1_var, red(rec2_var)),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var))
            ENDCASES;

  REDUCE_ordinal(cnst?_fun: [[T, PVS0Expr] -> ordinal],
                 vr?_fun: [PVS0Expr -> ordinal],
                 op1?_fun: [[nat, ordinal, PVS0Expr] -> ordinal],
                 op2?_fun: [[nat, ordinal, ordinal, PVS0Expr] -> ordinal],
                 rec?_fun: [[nat, ordinal, PVS0Expr] -> ordinal],
                 ite?_fun:
                   [[ordinal, ordinal, ordinal, PVS0Expr] -> ordinal]):
        [PVS0Expr -> ordinal] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr):
        LET red: [PVS0Expr -> ordinal] =
              REDUCE_ordinal(cnst?_fun, vr?_fun, op1?_fun, op2?_fun,
                             rec?_fun, ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var, PVS0Expr_adtvar),
               vr: vr?_fun(PVS0Expr_adtvar),
               op1(op11_var, op12_var):
                 op1?_fun(op11_var, red(op12_var), PVS0Expr_adtvar),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var),
                          PVS0Expr_adtvar),
               rec(rec1_var, rec2_var):
                 rec?_fun(rec1_var, red(rec2_var), PVS0Expr_adtvar),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var),
                          PVS0Expr_adtvar)
            ENDCASES;
 END PVS0Expr_adt

PVS0Expr_adt_map[T: TYPE+, T1: TYPE+]: THEORY
 BEGIN
  ASSUMING
   T_TCC1: ASSUMPTION EXISTS (x: T): TRUE;

   T1_TCC1: ASSUMPTION EXISTS (x: T1): TRUE;
  ENDASSUMING

  IMPORTING PVS0Expr_adt

  map(f: [T -> T1])(a: PVS0Expr[T]):  PVS0Expr[T1] =
      CASES a
        OF cnst(cnst1_var): cnst(f(cnst1_var)),
           vr: vr,
           op1(op11_var, op12_var): op1(op11_var, map(f)(op12_var)),
           op2(op21_var, op22_var, op23_var):
             op2(op21_var, map(f)(op22_var), map(f)(op23_var)),
           rec(rec1_var, rec2_var): rec(rec1_var, map(f)(rec2_var)),
           ite(ite1_var, ite2_var, ite3_var):
             ite(map(f)(ite1_var), map(f)(ite2_var), map(f)(ite3_var))
        ENDCASES;

  map(f: [T -> T1], a: PVS0Expr[T]):  PVS0Expr[T1] =
      CASES a
        OF cnst(cnst1_var): cnst(f(cnst1_var)),
           vr: vr,
           op1(op11_var, op12_var): op1(op11_var, map(f, op12_var)),
           op2(op21_var, op22_var, op23_var):
             op2(op21_var, map(f, op22_var), map(f, op23_var)),
           rec(rec1_var, rec2_var): rec(rec1_var, map(f, rec2_var)),
           ite(ite1_var, ite2_var, ite3_var):
             ite(map(f, ite1_var), map(f, ite2_var), map(f, ite3_var))
        ENDCASES;

  every(R: [[T, T1] -> boolean])(x: PVS0Expr[T], y: PVS0Expr[T1]):
        boolean =
          cnst?(x) AND cnst?(y) AND R(get_val(x), get_val(y))
       OR vr?(x) AND vr?(y)
       OR op1?(x) AND
           op1?(y) AND
            get_op(x) = get_op(y) AND every(R)(get_arg(x), get_arg(y))
       OR      op2?(x) AND op2?(y) AND get_op(x) = get_op(y)
           AND every(R)(get_arg1(x), get_arg1(y))
           AND every(R)(get_arg2(x), get_arg2(y))
       OR rec?(x) AND
           rec?(y) AND
            get_from_list(x) = get_from_list(y) AND
             every(R)(get_arg(x), get_arg(y))
       OR      ite?(x) AND ite?(y) AND every(R)(get_cond(x), get_cond(y))
           AND every(R)(get_if(x), get_if(y))
           AND every(R)(get_else(x), get_else(y));
 END PVS0Expr_adt_map

PVS0Expr_adt_reduce[T: TYPE+, range: TYPE]: THEORY
 BEGIN
  ASSUMING
   T_TCC1: ASSUMPTION EXISTS (x: T): TRUE;
  ENDASSUMING

  IMPORTING PVS0Expr_adt[T]

  reduce(cnst?_fun: [T -> range], vr?_fun: range,
         op1?_fun: [[nat, range] -> range],
         op2?_fun: [[nat, range, range] -> range],
         rec?_fun: [[nat, range] -> range],
         ite?_fun: [[range, range, range] -> range]):
        [PVS0Expr[T] -> range] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr[T]):
        LET red: [PVS0Expr[T] -> range] =
              reduce(cnst?_fun, vr?_fun, op1?_fun, op2?_fun, rec?_fun,
                     ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var),
               vr: vr?_fun,
               op1(op11_var, op12_var): op1?_fun(op11_var, red(op12_var)),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var)),
               rec(rec1_var, rec2_var): rec?_fun(rec1_var, red(rec2_var)),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var))
            ENDCASES;

  REDUCE(cnst?_fun: [[T, PVS0Expr[T]] -> range],
         vr?_fun: [PVS0Expr[T] -> range],
         op1?_fun: [[nat, range, PVS0Expr[T]] -> range],
         op2?_fun: [[nat, range, range, PVS0Expr[T]] -> range],
         rec?_fun: [[nat, range, PVS0Expr[T]] -> range],
         ite?_fun: [[range, range, range, PVS0Expr[T]] -> range]):
        [PVS0Expr[T] -> range] =
      LAMBDA (PVS0Expr_adtvar: PVS0Expr[T]):
        LET red: [PVS0Expr[T] -> range] =
              REDUCE(cnst?_fun, vr?_fun, op1?_fun, op2?_fun, rec?_fun,
                     ite?_fun)
          IN
          CASES PVS0Expr_adtvar
            OF cnst(cnst1_var): cnst?_fun(cnst1_var, PVS0Expr_adtvar),
               vr: vr?_fun(PVS0Expr_adtvar),
               op1(op11_var, op12_var):
                 op1?_fun(op11_var, red(op12_var), PVS0Expr_adtvar),
               op2(op21_var, op22_var, op23_var):
                 op2?_fun(op21_var, red(op22_var), red(op23_var),
                          PVS0Expr_adtvar),
               rec(rec1_var, rec2_var):
                 rec?_fun(rec1_var, red(rec2_var), PVS0Expr_adtvar),
               ite(ite1_var, ite2_var, ite3_var):
                 ite?_fun(red(ite1_var), red(ite2_var), red(ite3_var),
                          PVS0Expr_adtvar)
            ENDCASES;
 END PVS0Expr_adt_reduce