(more_lists2
 (subtype_length 0
  (subtype_length-1 nil 3755954548
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (A formal-type-decl nil more_lists2 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (B_pred const-decl "[A -> boolean]" more_lists2 nil)
    (B formal-subtype-decl nil more_lists2 nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subtype_nth_TCC1 0
  (subtype_nth_TCC1-1 nil 3756040270
   ("" (skeep)
    (("" (typepred "i") (("" (rewrite "subtype_length") nil nil)) nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (B formal-subtype-decl nil more_lists2 nil)
    (B_pred const-decl "[A -> boolean]" more_lists2 nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (A formal-type-decl nil more_lists2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subtype_length formula-decl nil more_lists2 nil))
   nil)))

