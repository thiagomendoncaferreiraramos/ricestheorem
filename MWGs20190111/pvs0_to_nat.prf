(pvs0_to_nat
 (nat2PVS0_TCC1 0
  (nat2PVS0_TCC1-1 nil 3711124235 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (nat2PVS0_TCC2 0
  (nat2PVS0_TCC2-1 nil 3711124235 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (nat2PVS0_TCC3 0
  (nat2PVS0_TCC3-2 nil 3746373954
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst -1 "(n-2)/5")
        (("1" (assert) nil nil)
         ("2" (lemma "nat2PVS0_TCC2")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC2 subtype-tcc nil pvs0_to_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (nat2PVS0_TCC3-1 nil 3711124235 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (nat2PVS0_TCC4 0
  (nat2PVS0_TCC4-1 nil 3711124235 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (nat2PVS0_TCC5 0
  (nat2PVS0_TCC5-1 nil 3711124235
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst -1 "(n-3)/5")
        (("1" (assert) nil nil)
         ("2" (lemma "nat2PVS0_TCC4")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC4 subtype-tcc nil pvs0_to_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nat2PVS0_TCC6 0
  (nat2PVS0_TCC6-1 nil 3711124235 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (nat2PVS0_TCC7 0
  (nat2PVS0_TCC7-1 nil 3711124235
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst -1 "(n-4)/5")
        (("1" (lemma "nat2tuple_first")
          (("1" (inst -1 "nat2tuple((n-4)/5)`2")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (lemma "nat2PVS0_TCC6")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (lemma "nat2PVS0_TCC6")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC6 subtype-tcc nil pvs0_to_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nat2PVS0_TCC8 0
  (nat2PVS0_TCC8-2 nil 3711184674
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst -1 "(n-4)/5")
        (("1" (lemma "nat2tuple_first")
          (("1" (inst -1 "nat2tuple((n-4)/5)`2")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (lemma "nat2PVS0_TCC6")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (lemma "nat2PVS0_TCC6")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC6 subtype-tcc nil pvs0_to_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (nat2PVS0_TCC8-1 nil 3711124235 ("" (termination-tcc) nil nil) nil
   nil))
 (nat2PVS0_TCC9 0
  (nat2PVS0_TCC9-1 nil 3711124235
   ("" (skeep)
    (("" (case "divides(5,n)")
      (("1" (prop)
        (("1" (lemma "divides_diff")
          (("1" (inst -1 "5" "n" "5")
            (("1" (rewrite "divides_reflexive")
              (("1" (assert)
                (("1" (expand "divides" -1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "rem_def2" :dir rl)
          (("2" (rewrite "rem_def2" :dir rl)
            (("2" (rewrite "rem_def2" :dir rl)
              (("2" (rewrite "rem_def2" :dir rl)
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "rem_def2" :dir rl)
        (("2" (rewrite "rem_def2" :dir rl)
          (("2" (rewrite "rem_def2" :dir rl)
            (("2" (rewrite "rem_def2" :dir rl)
              (("2" (lemma "rem_def2")
                (("2" (inst -1 "5" "n" "0") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (divides const-decl "bool" divides nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem_def2 formula-decl nil modulo_arithmetic nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (divides_diff formula-decl nil divides nil)
    (divides_reflexive formula-decl nil divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (nat2PVS0_TCC10 0
  (nat2PVS0_TCC10-1 nil 3711124235
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst -1 "(n-5)/5")
        (("1" (assert) nil nil)
         ("2" (lemma "nat2PVS0_TCC9")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC9 subtype-tcc nil pvs0_to_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nat2PVS0_TCC11 0
  (nat2PVS0_TCC11-1 nil 3711124235
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst-cp -1 "(n-5)/5")
        (("1" (inst -1 "nat2tuple((n-5)/5)`2")
          (("1" (grind) nil nil)
           ("2" (lemma "nat2PVS0_TCC9")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (lemma "nat2PVS0_TCC9")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (divides const-decl "bool" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat2PVS0_TCC9 subtype-tcc nil pvs0_to_nat nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nat2PVS0_TCC12 0
  (nat2PVS0_TCC12-2 nil 3711190722
   ("" (skeep)
    (("" (lemma "nat2tuple_first")
      (("" (inst-cp -1 "(n-5)/5")
        (("1" (inst -1 "nat2tuple((n-5)/5)`2")
          (("1" (grind) nil nil)
           ("2" (lemma "nat2PVS0_TCC9")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (lemma "nat2PVS0_TCC9")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple_first formula-decl nil tuple2nat "numbers/")
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (divides const-decl "bool" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat2PVS0_TCC9 subtype-tcc nil pvs0_to_nat nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" pvs0_to_nat nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (nat2PVS0_TCC12-1 nil 3711124235 ("" (termination-tcc) nil nil) nil
   nil))
 (PVS02nat_TCC1 0
  (PVS02nat_TCC1-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC2 0
  (PVS02nat_TCC2-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC3 0
  (PVS02nat_TCC3-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC4 0
  (PVS02nat_TCC4-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC5 0
  (PVS02nat_TCC5-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC6 0
  (PVS02nat_TCC6-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (PVS02nat_TCC7 0
  (PVS02nat_TCC7-1 nil 3711192483 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (nat2PVS0_inverse 0
  (nat2PVS0_inverse-2 nil 3746374296
   ("" (induct "expr")
    (("1" (skeep)
      (("1" (expand "PVS02nat")
        (("1" (expand "nat2PVS0")
          (("1" (case "divides(5, 5 * cnst1_var)")
            (("1" (assert) nil nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (expand "PVS02nat" 1)
        (("3" (expand "nat2PVS0" 1)
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1"
                    (inst -1
                     "2 + 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                     " 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                     "5")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1
                         "1 + 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                         "5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                         "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "divides")
                                (("2"
                                  (inst
                                   1
                                   "tuple2nat(op11_var, PVS02nat(op12_var))")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (case "5 * tuple2nat(op11_var, PVS02nat(op12_var)) / 5=  tuple2nat(op11_var, PVS02nat(op12_var))")
                            (("1" (replaces -1)
                              (("1"
                                (rewrite "nat2tuple_tuple2nat")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 1)
                          (("2" (expand "divides")
                            (("2"
                              (inst 1
                               "tuple2nat(op11_var, PVS02nat(op12_var))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (expand "PVS02nat" 1)
        (("4" (expand "nat2PVS0" 1)
          (("4" (lift-if)
            (("4" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1"
                    (inst -1 "5 *
                      tuple2nat(op21_var,
                                tuple2nat(PVS02nat(op22_var),
                                          PVS02nat(op23_var)))" "3 +
                     5 *
                      tuple2nat(op21_var,
                                tuple2nat(PVS02nat(op22_var),
                                          PVS02nat(op23_var)))" "5")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "divides" 1)
                          (("2"
                            (inst 1 "tuple2nat(op21_var,
                           tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1 " 5 *
                        tuple2nat(op21_var,
                                  tuple2nat(PVS02nat(op22_var),
                                            PVS02nat(op23_var)))" " 2 +
                       5 *
                        tuple2nat(op21_var,
                                  tuple2nat(PVS02nat(op22_var),
                                            PVS02nat(op23_var)))" "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(op21_var,
                             tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (lemma "divides_diff")
                          (("1"
                            (inst -1 "5 *
                          tuple2nat(op21_var,
                                    tuple2nat(PVS02nat(op22_var),
                                              PVS02nat(op23_var)))" "1 +
                         5 *
                          tuple2nat(op21_var,
                                    tuple2nat(PVS02nat(op22_var),
                                              PVS02nat(op23_var)))"
                             "5")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "divides" 1)
                                  (("2"
                                    (inst
                                     1
                                     "tuple2nat(op21_var,
                               tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1"
                              (case "5 *
                                      tuple2nat(op21_var,
                                                tuple2nat(PVS02nat(op22_var),
                                                          PVS02nat(op23_var)))
                                      / 5 =
                                      tuple2nat(op21_var,
                                                tuple2nat(PVS02nat(op22_var),
                                                          PVS02nat(op23_var)))")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "nat2tuple_tuple2nat")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "nat2tuple_tuple2nat")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(op21_var,
                               tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (expand "PVS02nat" 1)
        (("5" (expand "nat2PVS0" 1)
          (("5" (lift-if)
            (("5" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1"
                      (case "5 * tuple2nat(rec1_var, PVS02nat(rec2_var)) / 5= tuple2nat(rec1_var, PVS02nat(rec2_var))")
                      (("1" (replaces -1)
                        (("1" (rewrite "nat2tuple_tuple2nat")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 2)
                      (("2" (expand "divides" 1)
                        (("2"
                          (inst 1
                           "tuple2nat(rec1_var, PVS02nat(rec2_var))")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "PVS02nat" 1)
        (("6" (expand "nat2PVS0" 1)
          (("6" (lift-if)
            (("6" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1 "4 +
                       5 *
                        tuple2nat(PVS02nat(ite1_var),
                                  tuple2nat(PVS02nat(ite2_var),
                                            PVS02nat(ite3_var)))" "5 *
                        tuple2nat(PVS02nat(ite1_var),
                                  tuple2nat(PVS02nat(ite2_var),
                                            PVS02nat(ite3_var)))" "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(PVS02nat(ite1_var),
                             tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (lemma "divides_diff")
                          (("1"
                            (inst -1 "5 *
                          tuple2nat(PVS02nat(ite1_var),
                                    tuple2nat(PVS02nat(ite2_var),
                                              PVS02nat(ite3_var)))"
                             " 3 +
                         5 *
                          tuple2nat(PVS02nat(ite1_var),
                                    tuple2nat(PVS02nat(ite2_var),
                                              PVS02nat(ite3_var)))"
                             "5")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "divides" 1)
                                  (("2"
                                    (inst
                                     1
                                     "tuple2nat(PVS02nat(ite1_var),
                               tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (lemma "divides_diff")
                              (("1"
                                (inst
                                 -1
                                 " 5 *
                            tuple2nat(PVS02nat(ite1_var),
                                      tuple2nat(PVS02nat(ite2_var),
                                                PVS02nat(ite3_var)))"
                                 " 2 +
                           5 *
                            tuple2nat(PVS02nat(ite1_var),
                                      tuple2nat(PVS02nat(ite2_var),
                                                PVS02nat(ite3_var)))"
                                 "5")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "divides" 1)
                                      (("2"
                                        (inst
                                         1
                                         "tuple2nat(PVS02nat(ite1_var),
                                 tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "divides_diff")
                                  (("1"
                                    (inst
                                     -1
                                     " 5 *
                              tuple2nat(PVS02nat(ite1_var),
                                        tuple2nat(PVS02nat(ite2_var),
                                                  PVS02nat(ite3_var)))"
                                     " 1 +
                             5 *
                              tuple2nat(PVS02nat(ite1_var),
                                        tuple2nat(PVS02nat(ite2_var),
                                                  PVS02nat(ite3_var)))"
                                     "5")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (expand "divides" 1)
                                          (("2"
                                            (inst
                                             1
                                             "tuple2nat(PVS02nat(ite1_var),
                                   tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case
                                   "5 *
                                                 tuple2nat(PVS02nat(ite1_var),
                                                           tuple2nat
                                                           (PVS02nat(ite2_var),
                                                            PVS02nat(ite3_var)))
                                                 / 5 =
                                                 tuple2nat(PVS02nat(ite1_var),
                                                           tuple2nat
                                                           (PVS02nat(ite2_var),
                                                            PVS02nat(ite3_var)))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "nat2tuple_tuple2nat")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "nat2tuple_tuple2nat")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rec2_var skolem-const-decl "PVS0Expr[nat]" pvs0_to_nat nil)
    (rec1_var skolem-const-decl "nat" pvs0_to_nat nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (divides_diff formula-decl nil divides nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (divides const-decl "bool" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   nil)
  (nat2PVS0_inverse-1 nil 3711196882
   ("" (induct "expr")
    (("1" (skeep)
      (("1" (expand "PVS02nat")
        (("1" (expand "nat2PVS0")
          (("1" (case "divides(5, 5 * cnst1_var)")
            (("1" (assert) nil nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (expand "PVS02nat" 1)
        (("3" (expand "nat2PVS0" 1)
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1"
                    (inst -1
                     "2 + 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                     " 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                     "5")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1
                         "1 + 5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                         "5 * tuple2nat(op11_var, PVS02nat(op12_var))"
                         "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "divides")
                                (("2"
                                  (inst
                                   1
                                   "tuple2nat(op11_var, PVS02nat(op12_var))")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (case "5 * tuple2nat(op11_var, PVS02nat(op12_var)) / 5=  tuple2nat(op11_var, PVS02nat(op12_var))")
                            (("1" (replaces -1)
                              (("1"
                                (rewrite "nat2tuple_tuple2nat")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 1)
                          (("2" (expand "divides")
                            (("2"
                              (inst 1
                               "tuple2nat(op11_var, PVS02nat(op12_var))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (expand "PVS02nat" 1)
        (("4" (expand "nat2PVS0" 1)
          (("4" (lift-if)
            (("4" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1"
                    (inst -1 "5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" "3 +
               5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" "5")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "divides" 1)
                          (("2"
                            (inst 1 "tuple2nat(op21_var,
                   tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1 " 5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" " 2 +
               5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(op21_var,
                   tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (lemma "divides_diff")
                          (("1"
                            (inst -1 "5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" "1 +
               5 *
                tuple2nat(op21_var,
                          tuple2nat(PVS02nat(op22_var),
                                    PVS02nat(op23_var)))" "5")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "divides" 1)
                                  (("2"
                                    (inst
                                     1
                                     "tuple2nat(op21_var,
                   tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1"
                              (case "5 *
                     tuple2nat(op21_var,
                               tuple2nat(PVS02nat(op22_var),
                                         PVS02nat(op23_var)))
                     / 5 = 
                     tuple2nat(op21_var,
                               tuple2nat(PVS02nat(op22_var),
                                         PVS02nat(op23_var)))")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "nat2tuple_tuple2nat")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "nat2tuple_tuple2nat")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(op21_var,
                   tuple2nat(PVS02nat(op22_var), PVS02nat(op23_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (expand "PVS02nat" 1)
        (("5" (expand "nat2PVS0" 1)
          (("5" (lift-if)
            (("5" (split)
              (("1" (flatten)
                (("1" (lemma "divides_diff")
                  (("1"
                    (inst -1 " 5 * PVS02nat(rec1_var)"
                     "1 + 5 * PVS02nat(rec1_var)" "5")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "divides" 1)
                          (("2" (inst 1 "PVS02nat(rec1_var)") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1"
                      (case "5 * PVS02nat(rec1_var) / 5= PVS02nat(rec1_var)")
                      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "divides" 1)
                      (("2" (inst 1 "PVS02nat(rec1_var)") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "PVS02nat" 1)
        (("6" (expand "nat2PVS0" 1)
          (("6" (lift-if)
            (("6" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "divides_diff")
                      (("1"
                        (inst -1 "4 +
               5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))" "5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))" "5")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "divides" 1)
                              (("2"
                                (inst
                                 1
                                 "tuple2nat(PVS02nat(ite1_var),
                   tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (lemma "divides_diff")
                          (("1"
                            (inst -1 "5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))" " 3 +
               5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))" "5")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "divides" 1)
                                  (("2"
                                    (inst
                                     1
                                     "tuple2nat(PVS02nat(ite1_var),
                   tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (lemma "divides_diff")
                              (("1"
                                (inst
                                 -1
                                 " 5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))"
                                 " 2 +
               5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))"
                                 "5")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "divides" 1)
                                      (("2"
                                        (inst
                                         1
                                         "tuple2nat(PVS02nat(ite1_var),
                   tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "divides_diff")
                                  (("1"
                                    (inst
                                     -1
                                     " 5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))"
                                     " 1 +
               5 *
                tuple2nat(PVS02nat(ite1_var),
                          tuple2nat(PVS02nat(ite2_var),
                                    PVS02nat(ite3_var)))"
                                     "5")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (expand "divides" 1)
                                          (("2"
                                            (inst
                                             1
                                             "tuple2nat(PVS02nat(ite1_var),
                   tuple2nat(PVS02nat(ite2_var), PVS02nat(ite3_var)))")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case
                                   "5 *
                              tuple2nat(PVS02nat(ite1_var),
                                        tuple2nat
                                        (PVS02nat(ite2_var),
                                         PVS02nat(ite3_var)))
                              / 5 =
                              tuple2nat(PVS02nat(ite1_var),
                                        tuple2nat
                                        (PVS02nat(ite2_var),
                                         PVS02nat(ite3_var)))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "nat2tuple_tuple2nat")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "nat2tuple_tuple2nat")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (divides_diff formula-decl nil divides nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   shostak))
 (PVS02nat_inverse 0
  (PVS02nat_inverse-2 nil 3746374359
   ("" (measure-induct+ "n" "n")
    (("" (expand "nat2PVS0" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "PVS02nat" 1) (("2" (assert) nil nil)) nil)
           ("3" (expand "PVS02nat" 1)
            (("3" (inst -2 "nat2tuple((x!1 - 2) / 5)`2")
              (("1" (prop)
                (("1" (replaces -1)
                  (("1"
                    (case "(nat2tuple((x!1 - 2) / 5)`1, nat2tuple((x!1 - 2) / 5)`2)=nat2tuple((x!1 - 2) / 5)")
                    (("1" (replaces -1)
                      (("1" (rewrite "tuple2nat_nat2tuple")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil)
                     ("3" (rewrite "nat2PVS0_TCC2") nil nil))
                    nil))
                  nil)
                 ("2" (rewrite "nat2PVS0_TCC3") nil nil))
                nil)
               ("2" (rewrite "nat2PVS0_TCC2") nil nil))
              nil))
            nil)
           ("4" (expand "PVS02nat" 1)
            (("4" (inst -2 "nat2tuple((x!1 - 3) / 5)`2")
              (("1" (prop)
                (("1" (replace -1)
                  (("1" (lemma "tuple2nat_nat2tuple")
                    (("1" (inst?)
                      (("1" (assert) nil nil)
                       ("2" (lemma "nat2PVS0_TCC4")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC5")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC4")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (expand "PVS02nat" 1)
            (("5"
              (inst-cp -2 "nat2tuple
                                          (nat2tuple((x!1 - 4) / 5)`2)`1")
              (("1" (prop)
                (("1"
                  (inst -3 "nat2tuple
                                              (nat2tuple((x!1 - 4) / 5)`2)`2")
                  (("1" (prop)
                    (("1" (replaces -1)
                      (("1" (replaces -1)
                        (("1" (lemma "tuple2nat_nat2tuple")
                          (("1" (inst-cp -1 "nat2tuple((x!1-4)/5)`2")
                            (("1" (inst -1 "(x!1-4)/5")
                              (("1" (grind) nil nil)
                               ("2"
                                (lemma "nat2PVS0_TCC6")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "nat2PVS0_TCC6")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "nat2PVS0_TCC8")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "nat2PVS0_TCC6")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC7")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC6")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("6" (expand "PVS02nat" 2)
            (("6" (inst-cp -1 "nat2tuple((x!1 - 5) / 5)`1")
              (("1" (prop)
                (("1"
                  (inst-cp -2 "nat2tuple
                                              (nat2tuple((x!1 - 5) / 5)`2)`1")
                  (("1" (prop)
                    (("1"
                      (inst -3 "nat2tuple
                                                  (nat2tuple((x!1 - 5) / 5)`2)`2")
                      (("1" (prop)
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (lemma "tuple2nat_nat2tuple")
                                (("1"
                                  (inst-cp
                                   -1
                                   "nat2tuple((x!1 - 5) / 5)`2")
                                  (("1"
                                    (inst -1 "(x!1 - 5) / 5")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (lemma "nat2PVS0_TCC9")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "nat2PVS0_TCC9")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "nat2PVS0_TCC12")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (lemma "nat2PVS0_TCC9")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "nat2PVS0_TCC11")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "nat2PVS0_TCC9")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC10")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC9")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" pvs0_to_nat nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (nat2PVS0_TCC3 termination-tcc nil pvs0_to_nat nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nat2PVS0_TCC2 subtype-tcc nil pvs0_to_nat nil)
    (tuple2nat_nat2tuple formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC5 termination-tcc nil pvs0_to_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat2PVS0_TCC4 subtype-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC7 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC8 termination-tcc nil pvs0_to_nat nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (divides const-decl "bool" divides nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (nat2PVS0_TCC6 subtype-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC10 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC11 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC12 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC9 subtype-tcc nil pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (PVS02nat_inverse-1 nil 3711286709
   ("" (measure-induct+ "n" "n")
    (("" (expand "nat2PVS0" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "PVS02nat" 1) (("2" (assert) nil nil)) nil)
           ("3" (expand "PVS02nat" 1)
            (("3" (inst -2 "(x!1-2)/5")
              (("1" (assert) nil nil)
               ("2" (lemma "nat2PVS0_TCC2")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("4" (expand "PVS02nat" 1)
            (("4" (inst -2 "nat2tuple((x!1 - 3) / 5)`2")
              (("1" (prop)
                (("1" (replace -1)
                  (("1" (lemma "tuple2nat_nat2tuple")
                    (("1" (inst?)
                      (("1" (assert) nil nil)
                       ("2" (lemma "nat2PVS0_TCC4")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC5")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC4")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (expand "PVS02nat" 1)
            (("5"
              (inst-cp -2 "nat2tuple
                                      (nat2tuple((x!1 - 4) / 5)`2)`1")
              (("1" (prop)
                (("1"
                  (inst -3 "nat2tuple
                                      (nat2tuple((x!1 - 4) / 5)`2)`2")
                  (("1" (prop)
                    (("1" (replaces -1)
                      (("1" (replaces -1)
                        (("1" (lemma "tuple2nat_nat2tuple")
                          (("1" (inst-cp -1 "nat2tuple((x!1-4)/5)`2")
                            (("1" (inst -1 "(x!1-4)/5")
                              (("1" (grind) nil nil)
                               ("2"
                                (lemma "nat2PVS0_TCC6")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "nat2PVS0_TCC6")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "nat2PVS0_TCC8")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "nat2PVS0_TCC6")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC7")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC6")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("6" (expand "PVS02nat" 2)
            (("6" (inst-cp -1 "nat2tuple((x!1 - 5) / 5)`1")
              (("1" (prop)
                (("1"
                  (inst-cp -2 "nat2tuple
                                      (nat2tuple((x!1 - 5) / 5)`2)`1")
                  (("1" (prop)
                    (("1"
                      (inst -3 "nat2tuple
                                      (nat2tuple((x!1 - 5) / 5)`2)`2")
                      (("1" (prop)
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1"
                                (lemma "tuple2nat_nat2tuple")
                                (("1"
                                  (inst-cp
                                   -1
                                   "nat2tuple((x!1 - 5) / 5)`2")
                                  (("1"
                                    (inst -1 "(x!1 - 5) / 5")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (lemma "nat2PVS0_TCC9")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "nat2PVS0_TCC9")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "nat2PVS0_TCC12")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (lemma "nat2PVS0_TCC9")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "nat2PVS0_TCC11")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "nat2PVS0_TCC9")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (lemma "nat2PVS0_TCC10")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (lemma "nat2PVS0_TCC9")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat2PVS0_TCC2 subtype-tcc nil pvs0_to_nat nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (nat2PVS0_TCC5 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC4 subtype-tcc nil pvs0_to_nat nil)
    (tuple2nat_nat2tuple formula-decl nil tuple2nat "numbers/")
    (nat2PVS0_TCC7 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC8 termination-tcc nil pvs0_to_nat nil)
    (TRUE const-decl "bool" booleans nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (nat2PVS0_TCC6 subtype-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC10 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC11 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC12 termination-tcc nil pvs0_to_nat nil)
    (nat2PVS0_TCC9 subtype-tcc nil pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nat2PVS0_bijection 0
  (nat2PVS0_bijection-1 nil 3711443715
   ("" (expand "bijective?")
    (("" (prop)
      (("1" (expand "injective?")
        (("1" (skeep)
          (("1" (lemma "PVS02nat_inverse")
            (("1" (inst-cp -1 "x1")
              (("1" (inst -1 "x2") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "surjective?")
        (("2" (skeep)
          (("2" (inst 1 "PVS02nat(y)")
            (("2" (rewrite "nat2PVS0_inverse") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS02nat_inverse formula-decl nil pvs0_to_nat nil)
    (injective? const-decl "bool" functions nil)
    (nat2PVS0_inverse formula-decl nil pvs0_to_nat nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (map_nat2PVS0_inverse 0
  (map_nat2PVS0_inverse-1 nil 3747406638
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "map" 1 2)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "map" 2 1)
            (("2" (rewrite "nat2PVS0_inverse")
              (("2" (inst -1 "cdr(x!1)")
                (("2" (grind) (("2" (decompose-equality) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat2PVS0_inverse formula-decl nil pvs0_to_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (map_PVS02nat_inverse 0
  (map_PVS02nat_inverse-1 nil 3747406694
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "map " 1 2)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (expand "map" 2 1)
            (("2" (rewrite "PVS02nat_inverse")
              (("2" (inst -1 "cdr(x!1)")
                (("2" (grind) (("2" (decompose-equality) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PVS02nat_inverse formula-decl nil pvs0_to_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (nat2listPVS0_TCC1 0
  (nat2listPVS0_TCC1-2 nil 3747406262
   ("" (skeep)
    (("" (expand "nat_list_enum" 1)
      (("" (expand "nat_pair_to_list_length")
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "map") (("1" (propax) nil nil)) nil)
             ("2" (expand "map") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_list_enum const-decl "list[nat]" nat_list_enum "numbers/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (nat_pair_to_list_length def-decl
     "{l: list[nat] | length(l) = n + 1}" nat_list_enum "numbers/"))
   nil)
  (nat2listPVS0_TCC1-1 nil 3747405790 ("" (subtype-tcc) nil nil) nil
   nil))
 (listPVS02nat_TCC1 0
  (listPVS02nat_TCC1-2 nil 3747406306
   ("" (skeep)
    ((""
      (case "nat_list_enum_inv(map[PVS0Expr[nat], nat](PVS02nat)(l))=0")
      (("1" (lemma "nat_list_enum_inv_def")
        (("1" (inst?)
          (("1" (replace -2)
            (("1" (typepred "l") (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (nat_list_enum_inv const-decl "nat" nat_list_enum "numbers/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_list_enum const-decl "list[nat]" nat_list_enum "numbers/")
    (nat_list_enum_inv_def formula-decl nil nat_list_enum "numbers/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (listPVS02nat_TCC1-1 nil 3747405790 ("" (subtype-tcc) nil nil) nil
   nil))
 (nat2listPVS0_inverse 0
  (nat2listPVS0_inverse-1 nil 3747406766
   ("" (skeep)
    (("" (expand "listPVS02nat")
      (("" (expand "nat2listPVS0")
        (("" (rewrite "nat_list_enum_inv_def")
          (("" (rewrite "map_nat2PVS0_inverse") nil nil)) nil))
        nil))
      nil))
    nil)
   ((listPVS02nat const-decl "nat" pvs0_to_nat nil)
    (nat_list_enum_inv_def formula-decl nil nat_list_enum "numbers/")
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map_nat2PVS0_inverse formula-decl nil pvs0_to_nat nil)
    (nat2listPVS0 const-decl "(cons?[PVS0Expr[nat]])" pvs0_to_nat nil))
   nil))
 (listPVS02nat_inverse 0
  (listPVS02nat_inverse-1 nil 3747406820
   ("" (skeep)
    (("" (expand "nat2listPVS0")
      (("" (expand "listPVS02nat")
        (("" (rewrite "map_PVS02nat_inverse")
          (("" (rewrite "nat_list_enum_inv_def2")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nat2listPVS0 const-decl "(cons?[PVS0Expr[nat]])" pvs0_to_nat nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (map_PVS02nat_inverse formula-decl nil pvs0_to_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_list_enum const-decl "list[nat]" nat_list_enum "numbers/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_list_enum_inv_def2 formula-decl nil nat_list_enum "numbers/")
    (listPVS02nat const-decl "nat" pvs0_to_nat nil))
   nil)))

